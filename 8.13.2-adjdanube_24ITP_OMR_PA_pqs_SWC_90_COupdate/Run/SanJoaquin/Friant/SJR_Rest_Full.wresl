! SJR_Rest_Full.wresl

! ensure that total Millerton release is at least the restoration release target
goal setMLRTN_rel {C_MLRTN > MLRTN_rel}  

!**** leaving this for now but this needs to be reworked with the release estimates??
goal set_C18A { C_MLRTNa < Fr_snow_rel * taf_cfs}

! restrict the release from Friant to be the restoration release target
! this value includes Gravelly Ford diversions and losses.  Set the segment
! of flow below Gravelly Ford as the actual restoration flow - this will be
! passed on to the restoration channel in SJR_Restrict.wresl
! For CalSim 3, updated this calculation to include all water budget components from Millerton down to the restoration reach
! This calculation happens only in the WQ cycles, based on prior cycle values.  Only releases needed to meet SJRR flows go into C_MLRTNM.
! Releases that were not needed for SJRR flows will be moved into C_MLRTNF in this cycle
define upstr_accretionstoSJRR_np {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
                        + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
                        + TD_SJR227_059[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] + SG61_SJR214_7[SJRBASE_GW4] + SR_64_SJR214[SJRBASE_GW4] 
                        + SG62_SJR205_7[SJRBASE_GW4] + SG63_SJR205_8[SJRBASE_GW4]+ CT_GRAVELLYFORD[SJRBASE_GW4]}

!Also need to calculate minimum accretions at locations between C_SJR227 and C_SJR214 when flow is at zero, since that can control releases
!Only time this matters is when there are net depletions, so set to 99999 if flow not at 0, and the accretion calculation above will be the final result
define upstr_accretions_SJR227_np {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR225_np {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR221_np {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                       
define upstr_accretions_SJR214_np {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] + SG61_SJR214_7[SJRBASE_GW4] + SR_64_SJR214[SJRBASE_GW4]}
    case otherwise {
    condition always
    	value 99999. }}

define upstr_accretions_otherlocs_np {value min(upstr_accretions_SJR227_np, upstr_accretions_SJR225_np, upstr_accretions_SJR221_np, upstr_accretions_SJR214_np)}

define upstr_accretions_np {value min(upstr_accretionstoSJRR_np,upstr_accretions_otherlocs_np)}

define accr_beyond_SJRR_np {value max (0., upstr_accretions_np - REST_RCH_NP)}
define SJRR_rel_new_np {value max(0., MLRTN_rel - C_MLRTNA[SJRBASE_GW4], REST_RCH_NP - C_MLRTNA[SJRBASE_GW4], REST_RCH_NP - (upstr_accretions_np - accr_beyond_SJRR_np)  - C_MLRTNA[SJRBASE_GW4])}  !Need to account for C_MLRTNA here, so that does no change in this cycle

define upstr_accretionstoSJRR_p {value I_SJR265 + SG54_SJR263_7[SJR_PULSE] + I_SJR258 + SG55_SJR256_7[SJR_PULSE] + SG56_SJR249_7[SJR_PULSE] + SG57_SJR242_7[SJR_PULSE] 
                        + SG58_SJR235_7[SJR_PULSE] + R_64_PA1_SJR235[SJR_PULSE] + SR_64_SJR227[SJR_PULSE] + SG59_SJR227_7[SJR_PULSE] - D_SJR227_64_PA3[SJR_PULSE] 
                        + TD_SJR227_059[SJR_PULSE] + SG60_SJR221_7[SJR_PULSE] + SG61_SJR214_7[SJR_PULSE] + SR_64_SJR214[SJR_PULSE]
                        + SG62_SJR205_7[SJR_PULSE] + SG63_SJR205_8[SJR_PULSE]+ CT_GRAVELLYFORD[SJR_PULSE]}

!Also need to calculate minimum accretions at locations between C_SJR227 and C_SJR214 when flow is at zero, since that can control releases
!Only time this matters is when there are net depletions, so set to 99999 if flow not at 0, and the accretion calculation above will be the final result
define upstr_accretions_SJR227_p {
	case flowzero {
	condition C_SJR227[SJR_PULSE] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJR_PULSE] + I_SJR258 + SG55_SJR256_7[SJR_PULSE] + SG56_SJR249_7[SJR_PULSE] + SG57_SJR242_7[SJR_PULSE] 
              + SG58_SJR235_7[SJR_PULSE] + R_64_PA1_SJR235[SJR_PULSE] + SR_64_SJR227[SJR_PULSE] + SG59_SJR227_7[SJR_PULSE] - D_SJR227_64_PA3[SJR_PULSE] 
              + TD_SJR227_059[SJR_PULSE] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR225_p {
	case flowzero {
	condition C_SJR227[SJR_PULSE] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJR_PULSE] + I_SJR258 + SG55_SJR256_7[SJR_PULSE] + SG56_SJR249_7[SJR_PULSE] + SG57_SJR242_7[SJR_PULSE] 
              + SG58_SJR235_7[SJR_PULSE] + R_64_PA1_SJR235[SJR_PULSE] + SR_64_SJR227[SJR_PULSE] + SG59_SJR227_7[SJR_PULSE] - D_SJR227_64_PA3[SJR_PULSE] 
              + TD_SJR227_059[SJR_PULSE] + CT_GRAVELLYFORD[SJR_PULSE] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR221_p {
	case flowzero {
	condition C_SJR227[SJR_PULSE] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJR_PULSE] + I_SJR258 + SG55_SJR256_7[SJR_PULSE] + SG56_SJR249_7[SJR_PULSE] + SG57_SJR242_7[SJR_PULSE] 
              + SG58_SJR235_7[SJR_PULSE] + R_64_PA1_SJR235[SJR_PULSE] + SR_64_SJR227[SJR_PULSE] + SG59_SJR227_7[SJR_PULSE] - D_SJR227_64_PA3[SJR_PULSE] 
              + TD_SJR227_059[SJR_PULSE] + CT_GRAVELLYFORD[SJR_PULSE] + SG60_SJR221_7[SJR_PULSE] }
    case otherwise {
    condition always
    	value 99999. }}
                       
define upstr_accretions_SJR214_p {
	case flowzero {
	condition C_SJR227[SJR_PULSE] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJR_PULSE] + I_SJR258 + SG55_SJR256_7[SJR_PULSE] + SG56_SJR249_7[SJR_PULSE] + SG57_SJR242_7[SJR_PULSE] 
              + SG58_SJR235_7[SJR_PULSE] + R_64_PA1_SJR235[SJR_PULSE] + SR_64_SJR227[SJR_PULSE] + SG59_SJR227_7[SJR_PULSE] - D_SJR227_64_PA3[SJR_PULSE] 
              + TD_SJR227_059[SJR_PULSE] + CT_GRAVELLYFORD[SJR_PULSE] + SG60_SJR221_7[SJR_PULSE] + SG61_SJR214_7[SJR_PULSE] + SR_64_SJR214[SJR_PULSE]}
    case otherwise {
    condition always
    	value 99999. }}

define upstr_accretions_otherlocs_p {value min(upstr_accretions_SJR227_p, upstr_accretions_SJR225_p, upstr_accretions_SJR221_p, upstr_accretions_SJR214_p)}

define upstr_accretions_p {value min(upstr_accretionstoSJRR_p,upstr_accretions_otherlocs_p)}

define accr_beyond_SJRR_p {value max (0., upstr_accretions_p - REST_RCH_P)}
define SJRR_rel_new_p {value max(0., MLRTN_rel - C_MLRTNA[SJR_PULSE], REST_RCH_P - C_MLRTNA[SJR_PULSE], REST_RCH_P - (upstr_accretions_p - accr_beyond_SJRR_p) - C_MLRTNA[SJR_PULSE])}  !Need to account for C_MLRTNA here, so that does no change in this cycle, ! To check if flood flows can minimize Friant restoration releases

define SJRR_rel_new {
    case April {
        condition month==APR
        value SJRR_rel_new_np*14./30. + SJRR_rel_new_p*16./30. } 
    case MayOtherwise {
        condition always
        value SJRR_rel_new_np }
}

goal boundC_MLRTNmain { C_MLRTNM = SJRR_rel_new  }

define Rest_Rch_Target {
        case April {
                condition   month==APR
                value       rest_rch_np*14./30. + rest_rch_p*16./30.}
        case MayOtherwise {
                condition   always
                value       rest_rch_np} 
}
goal setSJRRflow {D_SJR205_SJR201 < Rest_Rch_Target}


!*** check this calculation, is used in SJR_restrict_cycle2on_fullsys.wresl
define SJRR_Rel {value MLRTN_rel}

define C_Mlrtnf_fix {
    case April {
        condition month==APR
        value (C_Mlrtnf[SJR_WQ1]*14. + C_Mlrtnf[SJR_WQ2]*16.)/30.}
    case otherwise {
        condition always
        value C_Mlrtnf[SJR_WQ1]}
}

goal fix_c_mlrtnf {c_mlrtnf = C_Mlrtnf_fix}


!*********************************************************************************************
! SJRR Recapture Ops

! Set lower SJR recapture to the weighted average of previous cycle solutions (April)
! or just SJR_WQ1 results (other months).  This accommodates recapture limits due to
! flood control operations.

define D_SJR096_SJRRrecap_limit {
    case April {
        condition month==APR
        value (D_SJR096_SJRRrecap[SJR_WQ1]*14. + D_SJR096_SJRRrecap[SJR_WQ2]*16.)/30.}
    case otherwise {
        condition always
        value D_SJR096_SJRRrecap[SJR_WQ1]}
}
define D_SJR082_SJRRrecap_limit {
    case April {
        condition month==APR
        value (D_SJR082_SJRRrecap[SJR_WQ1]*14. + D_SJR082_SJRRrecap[SJR_WQ2]*16.)/30.}
    case otherwise {
        condition always
        value D_SJR082_SJRRrecap[SJR_WQ1]}
}
define D_SJR070_SJRRrecap_limit {
    case April {
        condition month==APR
        value (D_SJR070_SJRRrecap[SJR_WQ1]*14. + D_SJR070_SJRRrecap[SJR_WQ2]*16.)/30.}
    case otherwise {
        condition always
        value D_SJR070_SJRRrecap[SJR_WQ1]}
}
define D_SJR070_SJRRremove_limit {
    case April {
        condition month==APR
        value (D_SJR070_SJRRremove[SJR_WQ1]*14. + D_SJR070_SJRRremove[SJR_WQ2]*16.)/30.}
    case otherwise {
        condition always
        value D_SJR070_SJRRremove[SJR_WQ1]}
}

goal set_D_SJR096_SJRRrecap {D_SJR096_SJRRrecap < D_SJR096_SJRRrecap_limit}
goal set_D_SJR082_SJRRrecap {D_SJR082_SJRRrecap < D_SJR082_SJRRrecap_limit}
goal set_D_SJR070_SJRRrecap {D_SJR070_SJRRrecap < D_SJR070_SJRRrecap_limit}
goal set_D_SJR070_SJRRremove {D_SJR070_SJRRremove < D_SJR070_SJRRremove_limit}

!*********************************************************************************************
! No South Delta Export of Recapture water prior to final cycle
goal set_D_OMR027_SJRRrecap_zero { D_OMR027_SJRRrecap = 0. }
goal set_D_SJR022_SJRRnorecap_zero { D_SJR022_SJRRnorecap = 0. }
goal zeroFriantVA_EXC { FriantVA_EXC = 0. }
goal zeroFriantVA_FLOW { FriantVA_FLOW = 0. }

define upstr_accretions_np_dv {alias upstr_accretions_np kind 'alias' units 'cfs'}
define accr_beyond_SJRR_np_dv {alias accr_beyond_SJRR_np kind 'alias' units 'cfs'}
define upstr_accretions_p_dv {alias upstr_accretions_p kind 'alias' units 'cfs'}
define accr_beyond_SJRR_p_dv {alias accr_beyond_SJRR_p kind 'alias' units 'cfs'}
define SJRR_rel_new_p_dv {alias SJRR_rel_new_p kind 'alias' units 'cfs'}
define SJRR_rel_new_np_dv {alias SJRR_rel_new_np kind 'alias' units 'cfs'}
define SJRR_rel_new_dv {alias SJRR_rel_new kind 'alias' units 'cfs'}
define Rest_Rch_Target_dv {alias Rest_Rch_Target kind 'alias' units 'cfs'}

define FriantVA_flowDV {std kind 'va-flow' units 'cfs'}
goal zeroFriantVA_flowDV { FriantVA_flowDV = 0. }

