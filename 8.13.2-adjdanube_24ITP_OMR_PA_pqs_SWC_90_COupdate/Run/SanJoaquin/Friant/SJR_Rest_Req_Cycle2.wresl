! SJR_Rest_Req__Cycle2.wresl

! This file is included in Cycles 1 and 2 uses average monthly values for the 
! restoration flow requirements.  This sets up water supply, snowmelt release,
! and flood control operations at Friant and allows the solution for the overall
! volume movement of water in the month.  

! ensure that total Millerton release is at least the restoration release target
goal setMLRTN_rel {C_MLRTN > MLRTN_rel}  

define SJRR_rel {
        case April {
                condition   month==APR
                value       rest_req_np*taf_cfs*30./14.
        }
        case MayOtherwise {
                condition always
                value       MLRTN_rel
        }
}
define SJRR_relDV {alias SJRR_rel kind 'flow-min-requirement' units 'cfs'}

define SJRR_rel_p {
    case April {
        condition   month==APR
        value       rest_req_p*taf_cfs*30./16.
    }
    case Otherwise {
        condition   always
        value       MLRTN_rel
    }
}
define SJRR_rel_pDV {alias SJRR_rel_p kind 'flow-min-requirement' units 'cfs'}

define rel_def_np {value max(0., SJRR_rel_p - SJRR_rel)}
define rel_def_p {value max(0., SJRR_rel - SJRR_rel_p)}

define rel_add_np {value min(rel_def_np, Fr_snow_rel*taf_cfs*30./14.)}
define rel_add_p {value min(rel_def_p, Fr_snow_rel*taf_cfs*30./16.)}
define rel_add_mon {value max(0.,Fr_snow_rel*taf_cfs - rel_add_np*14./30. - rel_add_p*16./30.)}

define rel_add_np_dv {alias rel_add_np kind 'alias' units 'cfs'}
define rel_add_p_dv {alias rel_add_p kind 'alias' units 'cfs'}
define rel_add_mon_dv {alias rel_add_mon kind 'alias' units 'cfs'}

!Set snowmelt release
goal set_C_MLRTNa { C_MLRTNa = C_MLRTNA[SJRBASE_GW4]}! < rel_add_np + rel_add_mon}

! restrict the release from Friant to be the restoration release target
! this value includes Gravelly Ford diversions and losses.  Set the segment
! of flow below Gravelly Ford as the actual restoration flow - this will be
! passed on to the restoration channel in SJR_Restrict.wresl
! For CalSim 3, updated this calculation to include all water budget components from Millerton down to the restoration reach
! This calculation happens only in the WQ cycles, based on prior cycle values.  Only releases needed to meet SJRR flows go into C_MLRTNM.
! Releases that were not needed for SJRR flows will be moved into C_MLRTNF in this cycle
define upstr_accretionstoSJRR {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
                        + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
                        + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] + SG61_SJR214_7[SJRBASE_GW4] + SR_64_SJR214[SJRBASE_GW4] 
                        + SG62_SJR205_7[SJRBASE_GW4] + SG63_SJR205_8[SJRBASE_GW4]}

!Also need to calculate minimum accretions at locations between C_SJR227 and C_SJR214 when flow is at zero, since that can control releases
!Only time this matters is when there are net depletions, so set to 99999 if flow not at 0, and the accretion calculation above will be the final result
define upstr_accretions_SJR227 {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR225 {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                        
define upstr_accretions_SJR221 {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] }
    case otherwise {
    condition always
    	value 99999. }}
                       
define upstr_accretions_SJR214 {
	case flowzero {
	condition C_SJR227[SJRBASE_GW4] < 0.001
		value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
              + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
              + TD_SJR227_059[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] + SG61_SJR214_7[SJRBASE_GW4] + SR_64_SJR214[SJRBASE_GW4]}
    case otherwise {
    condition always
    	value 99999. }}

define upstr_accretions_otherlocs {value min(upstr_accretions_SJR227, upstr_accretions_SJR225, upstr_accretions_SJR221, upstr_accretions_SJR214)}

define upstr_accretions {value min(upstr_accretionstoSJRR,upstr_accretions_otherlocs)}

define accr_beyond_SJRR {value max (0., upstr_accretions - REST_RCH_NP)}
define SJRR_rel_new {value max(0., MLRTN_rel - C_MLRTNA[SJRBASE_GW4], REST_RCH_NP - (upstr_accretions - accr_beyond_SJRR) - C_MLRTNA[SJRBASE_GW4])}  !Need to account for C_MLRTNA here, so that does not change in this cycle
goal boundC_MLRTNmain { C_MLRTNM = SJRR_rel_new }  
goal meetSJRR {D_SJR205_SJR201 = REST_RCH_NP}

! Intent is to split flow properly between C_MLRTNM and C_MLRTNF in this cycle, but total of M and F should not change}
goal conserveC_MLRTNA_F {lhs C_MLRTNM + C_MLRTNF rhs C_MLRTNM[SJRBASE_GW4] + C_MLRTNF[SJRBASE_GW4] lhs>rhs penalty 99999. lhs<rhs penalty 99999.}

define assumed_MLRTNF {value max(0.,C_MLRTNM[SJRBASE_GW4] - SJRR_rel_new)}


!Computes volume of SJRR flows that make it to the Merced
include '..\..\VSA\VA_Friant_flow_calcs_SJRWQ1.wresl'

!******************************************************************************
! SJRR Recapture Logic

! Set to results of SJRBASE_GW4 cycle
! If Friant was in flood control, recapture is set to zero ...  This assumption is now removed TF Stantec 040623
define SJRR_flow_at_Merced {value min(D_SJR205_SJR201[SJRBASE_GW4],SJR116_SJRRflow)} !min of SJRR flows and SJRR flows computed to make it past the Merced
goal set_SRRP_lmt  { 
    lhs D_SJR096_SJRRrecap + D_SJR082_SJRRrecap + D_SJR070_SJRRrecap + D_SJR070_SJRRremove 
!    case flood {
!        condition C_MLRTNA[SJRBASE_GW4] + assumed_MLRTNF > 0.5
!        rhs 0.
!        }
    case otherwise {
        condition always
        rhs SJRR_flow_at_Merced
        lhs<rhs penalty 0.
        }
}

define recap_D_SJR096_SJR_max {select D_SJR096 from SRRP_Recapture_Pot where mon=month}
define recap_D_SJR082_SJR_max {select D_SJR082 from SRRP_Recapture_Pot where mon=month}
define recap_D_SJR070_SJR_max {select D_SJR070 from SRRP_Recapture_Pot where mon=month}
define recap_max {value recap_D_SJR096_SJR_max + recap_D_SJR082_SJR_max + recap_D_SJR070_SJR_max }

goal set_SRRP_lmt1  { D_SJR096_SJRRrecap + D_SJR082_SJRRrecap + D_SJR070_SJRRrecap < SJRR_flow_at_Merced }

goal set_D_SJR096_SJRRrecap_lmt1 { D_SJR096_SJRRrecap < recap_D_SJR096_SJR_max} ! SRRP flow recapture - Patterson ID
goal set_D_SJR096_SJRRrecap_lmt2 { D_SJR096_SJRRrecap < SJRR_flow_at_Merced * recap_D_SJR096_SJR_max/recap_max }

goal set_D_SJR082_SJRRrecap_lmt1 { D_SJR082_SJRRrecap < recap_D_SJR082_SJR_max}   ! SRRP flow recapture - West Stanislaus ID
goal set_D_SJR082_SJRRrecap_lmt2 { D_SJR082_SJRRrecap < SJRR_flow_at_Merced * recap_D_SJR082_SJR_max/recap_max }

goal set_C_SJR070_SJRRrecap_lmt1 { D_SJR070_SJRRrecap < recap_D_SJR070_SJR_max}   ! SRRP flow recapture - Banta Carbona ID
goal set_C_SJR070_SJRRrecap_lmt2 { D_SJR070_SJRRrecap < SJRR_flow_at_Merced * recap_D_SJR070_SJR_max/recap_max }

! Remaining SRRP flow - remove from SJR until the final cycle
goal D_SJR070_SJRRremove_lmt1 { D_SJR070_SJRRremove < SJRR_flow_at_Merced - D_SJR096_SJRRrecap - D_SJR082_SJRRrecap - D_SJR070_SJRRrecap } 

define upstr_accretions_dv {alias upstr_accretions kind 'alias' units 'cfs'}
define accr_beyond_SJRR_dv {alias accr_beyond_SJRR kind 'alias' units 'cfs'}
define SJRR_rel_new_dv {alias SJRR_rel_new kind 'alias' units 'cfs'}
define assumed_MLRTNF_dv {alias assumed_MLRTNF kind 'alias' units 'cfs'}
define SJRR_flow_at_Merced_dv {alias SJRR_flow_at_Merced kind 'alias' units 'cfs'}


!**********BELOW FOR DEBUGGING -TF Stantec 051723
!Accretions below Millerton and above Gravelly Ford, by cycle
define upstr_accretionsMLRTNGF_SJRBASE {value I_SJR265 + SG54_SJR263_7[SJRBASE] + I_SJR258 + SG55_SJR256_7[SJRBASE] + SG56_SJR249_7[SJRBASE] + SG57_SJR242_7[SJRBASE] 
                        + SG58_SJR235_7[SJRBASE] + R_64_PA1_SJR235[SJRBASE] + SR_64_SJR227[SJRBASE] + SG59_SJR227_7[SJRBASE] - D_SJR227_64_PA3[SJRBASE] 
                        + TD_SJR227_059[SJRBASE] }
                    
define upstr_accretionsMLRTNGF_SJRBASEGW1 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW1] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW1] + SG56_SJR249_7[SJRBASE_GW1] + SG57_SJR242_7[SJRBASE_GW1] 
                        + SG58_SJR235_7[SJRBASE_GW1] + R_64_PA1_SJR235[SJRBASE_GW1] + SR_64_SJR227[SJRBASE_GW1] + SG59_SJR227_7[SJRBASE_GW1] - D_SJR227_64_PA3[SJRBASE_GW1] 
                        + TD_SJR227_059[SJRBASE_GW1] }

define upstr_accretionsMLRTNGF_SJRBASEGW2 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW2] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW2] + SG56_SJR249_7[SJRBASE_GW2] + SG57_SJR242_7[SJRBASE_GW2] 
                        + SG58_SJR235_7[SJRBASE_GW2] + R_64_PA1_SJR235[SJRBASE_GW2] + SR_64_SJR227[SJRBASE_GW2] + SG59_SJR227_7[SJRBASE_GW2] - D_SJR227_64_PA3[SJRBASE_GW2] 
                        + TD_SJR227_059[SJRBASE_GW2] }

define upstr_accretionsMLRTNGF_SJRBASEGW3 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW3] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW3] + SG56_SJR249_7[SJRBASE_GW3] + SG57_SJR242_7[SJRBASE_GW3] 
                        + SG58_SJR235_7[SJRBASE_GW3] + R_64_PA1_SJR235[SJRBASE_GW3] + SR_64_SJR227[SJRBASE_GW3] + SG59_SJR227_7[SJRBASE_GW3] - D_SJR227_64_PA3[SJRBASE_GW3] 
                        + TD_SJR227_059[SJRBASE_GW3] }

define upstr_accretionsMLRTNGF_SJRBASEGW4 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
                        + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
                        + TD_SJR227_059[SJRBASE_GW4]}

!Accretions below Millerton and above Restoration reach, by cycle
define upstr_accretionsMLRTNSJRR_SJRBASE {value I_SJR265 + SG54_SJR263_7[SJRBASE] + I_SJR258 + SG55_SJR256_7[SJRBASE] + SG56_SJR249_7[SJRBASE] + SG57_SJR242_7[SJRBASE] 
                        + SG58_SJR235_7[SJRBASE] + R_64_PA1_SJR235[SJRBASE] + SR_64_SJR227[SJRBASE] + SG59_SJR227_7[SJRBASE] - D_SJR227_64_PA3[SJRBASE] 
                        + TD_SJR227_059[SJRBASE] + SG60_SJR221_7[SJRBASE] + SG61_SJR214_7[SJRBASE] + SR_64_SJR214[SJRBASE]
                        + SG62_SJR205_7[SJRBASE] + SG63_SJR205_8[SJRBASE] + CT_GRAVELLYFORD[SJRBASE]}
                    
define upstr_accretionsMLRTNSJRR_SJRBASEGW1 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW1] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW1] + SG56_SJR249_7[SJRBASE_GW1] + SG57_SJR242_7[SJRBASE_GW1] 
                        + SG58_SJR235_7[SJRBASE_GW1] + R_64_PA1_SJR235[SJRBASE_GW1] + SR_64_SJR227[SJRBASE_GW1] + SG59_SJR227_7[SJRBASE_GW1] - D_SJR227_64_PA3[SJRBASE_GW1] 
                        + TD_SJR227_059[SJRBASE_GW1] + SG60_SJR221_7[SJRBASE_GW1] + SG61_SJR214_7[SJRBASE_GW1] + SR_64_SJR214[SJRBASE_GW1]
                        + SG62_SJR205_7[SJRBASE_GW1] + SG63_SJR205_8[SJRBASE_GW1] + CT_GRAVELLYFORD[SJRBASE_GW1]}
                        
define upstr_accretionsMLRTNSJRR_SJRBASEGW2 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW2] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW2] + SG56_SJR249_7[SJRBASE_GW2] + SG57_SJR242_7[SJRBASE_GW2] 
                        + SG58_SJR235_7[SJRBASE_GW2] + R_64_PA1_SJR235[SJRBASE_GW2] + SR_64_SJR227[SJRBASE_GW2] + SG59_SJR227_7[SJRBASE_GW2] - D_SJR227_64_PA3[SJRBASE_GW2] 
                        + TD_SJR227_059[SJRBASE_GW2] + SG60_SJR221_7[SJRBASE_GW2] + SG61_SJR214_7[SJRBASE_GW2] + SR_64_SJR214[SJRBASE_GW2]
                        + SG62_SJR205_7[SJRBASE_GW2] + SG63_SJR205_8[SJRBASE_GW2] + CT_GRAVELLYFORD[SJRBASE_GW2]}

define upstr_accretionsMLRTNSJRR_SJRBASEGW3 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW3] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW3] + SG56_SJR249_7[SJRBASE_GW3] + SG57_SJR242_7[SJRBASE_GW3] 
                        + SG58_SJR235_7[SJRBASE_GW3] + R_64_PA1_SJR235[SJRBASE_GW3] + SR_64_SJR227[SJRBASE_GW3] + SG59_SJR227_7[SJRBASE_GW3] - D_SJR227_64_PA3[SJRBASE_GW3] 
                        + TD_SJR227_059[SJRBASE_GW3] + SG60_SJR221_7[SJRBASE_GW3] + SG61_SJR214_7[SJRBASE_GW3] + SR_64_SJR214[SJRBASE_GW3]
                        + SG62_SJR205_7[SJRBASE_GW3] + SG63_SJR205_8[SJRBASE_GW3] + CT_GRAVELLYFORD[SJRBASE_GW3]}

define upstr_accretionsMLRTNESJRR_SJRBASEGW4 {value I_SJR265 + SG54_SJR263_7[SJRBASE_GW4] + I_SJR258 + SG55_SJR256_7[SJRBASE_GW4] + SG56_SJR249_7[SJRBASE_GW4] + SG57_SJR242_7[SJRBASE_GW4] 
                        + SG58_SJR235_7[SJRBASE_GW4] + R_64_PA1_SJR235[SJRBASE_GW4] + SR_64_SJR227[SJRBASE_GW4] + SG59_SJR227_7[SJRBASE_GW4] - D_SJR227_64_PA3[SJRBASE_GW4] 
                        + TD_SJR227_059[SJRBASE_GW4] + SG60_SJR221_7[SJRBASE_GW4] + SG61_SJR214_7[SJRBASE_GW4] + SR_64_SJR214[SJRBASE_GW4]
                        + SG62_SJR205_7[SJRBASE_GW4] + SG63_SJR205_8[SJRBASE_GW4] + CT_GRAVELLYFORD[SJRBASE_GW4]}



