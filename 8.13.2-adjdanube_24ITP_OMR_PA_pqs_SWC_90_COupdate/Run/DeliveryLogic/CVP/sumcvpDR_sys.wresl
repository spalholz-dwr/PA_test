! E. Reyes 12/12/00

! This file sums the monthly maximum stream diversion requirements into annual diversion requirements

!  NORTH OF DELTA
!=====================================================================================================
!=====================================================================================================
!**********************************************************************************
!Define Annual Applied Water Rice Demand and Annual Urban Demand 
!**********************************************************************************
define AWRann_02_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_02_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_02_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_02_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_02_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_02_PAdv(-1) } }
          
goal setAWRann_02_PAdv {AWRann_02_PAdv = AWRann_02_PA}
          
!Define Annual Demands
define AWRann_03_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_03_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_03_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_03_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_03_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_03_PAdv(-1) } }
          
goal setAWRann_03_PAdv {AWRann_03_PAdv = AWRann_03_PA}
                    
          
define AWRann_04_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_04_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_04_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_04_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_04_PA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_04_PA1dv(-1) } }
          
goal setAWRann_04_PA1dv {AWRann_04_PA1dv = AWRann_04_PA1}
                    

define AWRann_04_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_04_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_04_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_04_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_04_PA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
           value AWRann_04_PA2dv(-1) } }
          
goal setAWRann_04_PA2dv {AWRann_04_PA2dv = AWRann_04_PA2}
                   
 
 define AWRann_07N_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_07N_PA{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_07N_PA(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_07N_PA(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_07N_PA(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWRann_07N_PAdv(-1) } }
          
goal setAWRann_07N_PAdv {AWRann_07N_PAdv = AWRann_07N_PA}
                   
 
 define AWRann_07S_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_07S_PA{   
         case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
           condition month == OCT .and. wateryear == bgnWY
            sum(i=0,11,1)  AWR_07S_PA(i)*cfs_taf(i)}
         case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
           condition month == MAR .and. wateryear == EndWY
            sum(i=prevOCT,SEP-month,1) AWR_07S_PA(i)*cfs_taf(i)}
         case March { ! March for wateryears BgnWY - year before EndWY
           condition month == MAR .and. wateryear < EndWY
            sum(i=0,11,1)  AWR_07S_PA(i)*cfs_taf(i)}
         case Rest { 
           condition always
           value AWRann_07S_PAdv(-1) } }
          
goal setAWRann_07S_PAdv {AWRann_07S_PAdv = AWRann_07S_PA}
                   
           
 !Define Annual Demands
 define AWRann_16_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_16_PA{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_16_PA(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_16_PA(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_16_PA(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWRann_16_PAdv(-1) } }
          
goal setAWRann_16_PAdv {AWRann_16_PAdv = AWRann_16_PA}
                    
 
 define UDann_02_PUdv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}
 define UDann_02_PU{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  UD_02_PU(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) UD_02_PU(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  UD_02_PU(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value UDann_02_PUdv(-1) } }
          
goal setUDann_02_PUdv {UDann_02_PUdv = UDann_02_PU}
                    
 
!define UDann_03_PU3dv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}
!define UDann_03_PU3{   
!       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
!         condition month == OCT .and. wateryear == bgnWY
!          sum(i=0,11,1)  UD_03_PU3(i)*cfs_taf(i)}
!       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
!         condition month == MAR .and. wateryear == EndWY
!          sum(i=prevOCT,SEP-month,1) UD_03_PU3(i)*cfs_taf(i)}
!       case March { ! March for wateryears BgnWY - year before EndWY
!         condition month == MAR .and. wateryear < EndWY
!          sum(i=0,11,1)  UD_03_PU3(i)*cfs_taf(i)}
!       case Rest { 
!         condition always
!          value UDann_03_PU3dv(-1) } }
          
!goal setUDann_03_PU3dv {UDann_03_PU3dv = UDann_03_PU3}
                    

define UDann_03_PU1dv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}          
define UDann_03_PU1{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  UD_03_PU1(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) UD_03_PU1(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  UD_03_PU1(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value UDann_03_PU1dv(-1) } }
          
goal setUDann_03_PU1dv {UDann_03_PU1dv = UDann_03_PU1}
                    

define UDann_03_PU2dv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}          
define UDann_03_PU2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  UD_03_PU2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) UD_03_PU2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  UD_03_PU2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value UDann_03_PU2dv(-1) } }
          
goal setUDann_03_PU2dv {UDann_03_PU2dv = UDann_03_PU2}
                    
          
!Define Annual Demands
define AWRann_02_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_02_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_02_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_02_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_02_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_02_SAdv(-1) } }
          
goal setAWRann_02_SAdv {AWRann_02_SAdv = AWRann_02_SA}
                    

define AWRann_03_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_03_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_03_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_03_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_03_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_03_SAdv(-1) } }
          
goal setAWRann_03_SAdv {AWRann_03_SAdv = AWRann_03_SA}
                    

define UDann_03_SUdv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}          
define UDann_03_SU{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  UD_03_SU(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) UD_03_SU(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  UD_03_SU(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value UDann_03_SUdv(-1) } }
          
goal setUDann_03_SUdv {UDann_03_SUdv = UDann_03_SU}
                    
          
define UDann_02_SUdv {std kind 'ANNUAL-URBAN-DEMAND' units 'taf'}          
define UDann_02_SU{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  UD_02_SU(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) UD_02_SU(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  UD_02_SU(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value UDann_02_SUdv(-1) } }
          
goal setUDann_02_SUdv {UDann_02_SUdv = UDann_02_SU}
                              

define AWRann_08N_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_08N_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_08N_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_08N_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_08N_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_08N_SA1dv(-1) } }
          
goal setAWRann_08N_SA1dv {AWRann_08N_SA1dv = AWRann_08N_SA1}
                    

define AWRann_08N_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_08N_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_08N_SA2(i)*RiceFact_08N_SA2*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_08N_SA2(i)*RiceFact_08N_SA2*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_08N_SA2(i)*RiceFact_08N_SA2*cfs_taf(i)}
       case Rest { 
         condition always
           value AWRann_08N_SA2dv(-1) } }
          
goal setAWRann_08N_SA2dv {AWRann_08N_SA2dv = AWRann_08N_SA2}
                   
 
 define AWRann_08S_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_08S_SA1{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_08S_SA1(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_08S_SA1(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_08S_SA1(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWRann_08S_SA1dv(-1) } }
          
goal setAWRann_08S_SA1dv {AWRann_08S_SA1dv = AWRann_08S_SA1}
                    
 
 define AWRann_08S_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_08S_SA2{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_08S_SA2(i)*RiceFact_08S_SA2*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_08S_SA2(i)*RiceFact_08S_SA2*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_08S_SA2(i)*RiceFact_08S_SA2*cfs_taf(i)}
        case Rest { 
          condition always
           value AWRann_08S_SA2dv(-1) } }
          
goal setAWRann_08S_SA2dv {AWRann_08S_SA2dv = AWRann_08S_SA2}
                    
 
 define AWRann_08S_SA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_08S_SA3{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_08S_SA3(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_08S_SA3(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_08S_SA3(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWRann_08S_SA3dv(-1) } }
          
goal setAWRann_08S_SA3dv {AWRann_08S_SA3dv = AWRann_08S_SA3}
                    
           
 define AWRann_09_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
 define AWRann_09_SA1{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_09_SA1(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_09_SA1(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_09_SA1(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value AWRann_09_SA1dv(-1) } }
          
goal setAWRann_09_SA1dv {AWRann_09_SA1dv = AWRann_09_SA1}
                    

define AWRann_09_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_09_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_09_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_09_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_09_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_09_SA2dv(-1) } }
          
goal setAWRann_09_SA2dv {AWRann_09_SA2dv = AWRann_09_SA2}
                    
define AWRann_18_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_18_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_18_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_18_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_18_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_18_SAdv(-1) } }
          
goal setAWRann_18_SAdv {AWRann_18_SAdv = AWRann_18_SA}
                    
                    
define AWRann_19_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_19_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_19_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_19_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_19_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_19_SAdv(-1) } }
          
goal setAWRann_19_SAdv {AWRann_19_SAdv = AWRann_19_SA}
                    

define AWRann_21_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_21_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_21_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_21_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_21_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_21_SAdv(-1) } }
          
goal setAWRann_21_SAdv {AWRann_21_SAdv = AWRann_21_SA}
                    

define AWRann_22_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_22_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_22_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_22_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_22_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_22_SA1dv(-1) } }
          
goal setAWRann_22_SA1dv {AWRann_22_SA1dv = AWRann_22_SA1}
                    

define AWRann_08N_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWRann_08N_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_08N_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_08N_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_08N_PR1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_08N_PR1dv(-1) } }
          
goal setAWRann_08N_PR1dv {AWRann_08N_PR1dv = AWRann_08N_PR1}
                    

define AWRann_08N_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}                  
define AWRann_08N_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_08N_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_08N_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_08N_PR2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_08N_PR2dv(-1) } }
          
goal setAWRann_08N_PR2dv {AWRann_08N_PR2dv = AWRann_08N_PR2}
                    
 
 define AWRann_08S_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWRann_08S_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWR_08S_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWR_08S_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWR_08S_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value AWRann_08S_PRdv(-1) } }
          
goal setAWRann_08S_PRdv {AWRann_08S_PRdv = AWRann_08S_PR}
                     

define AWRann_17N_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}           
define AWRann_17N_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWR_17N_PR(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWR_17N_PR(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWR_17N_PR(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWRann_17N_PRdv(-1) } }
          
goal setAWRann_17N_PRdv {AWRann_17N_PRdv = AWRann_17N_PR}
                               
/*
define AWRann_17S_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWann_17S_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  (AWR_17S_PR(i)+AWO_17S_PR(i)+AWW_17S_PR(i))*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) (AWR_17S_PR(i)+AWO_17S_PR(i)+AWW_17S_PR(i))*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  (AWR_17S_PR(i)+AWO_17S_PR(i)+AWW_17S_PR(i))*cfs_taf(i)}
       case Rest { 
         condition always
           value AWann_17S_PRdv(-1) } }
          
goal setAWRann_17S_PRdv {AWRann_17S_PRdv = AWRann_17S_PR}
*/                                      

!****************************************************************************
!Define Annual Applied Water Demand for crops other than rice
!****************************************************************************
define AWOann_02_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_02_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_02_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_02_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_02_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_02_PAdv(-1) } }

goal setAWOann_02_PAdv {AWOann_02_PAdv = AWOann_02_PA}
          
!Define Annual Demands
define AWOann_03_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_03_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_03_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_03_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_03_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_03_PAdv(-1) } }

goal setAWOann_03_PAdv {AWOann_03_PAdv = AWOann_03_PA}
                    

define AWOann_04_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_04_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_04_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_04_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_04_PA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_04_PA1dv(-1) } }

goal setAWOann_04_PA1dv {AWOann_04_PA1dv = AWOann_04_PA1}
                    

define AWOann_04_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_04_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_04_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_04_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_04_PA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
           value AWOann_04_PA2dv(-1) } }

goal setAWOann_04_PA2dv {AWOann_04_PA2dv = AWOann_04_PA2}
                   
 
 define AWOann_07N_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_07N_PA{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_07N_PA(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_07N_PA(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_07N_PA(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value AWOann_07N_PAdv(-1) } }

goal setAWOann_07N_PAdv {AWOann_07N_PAdv = AWOann_07N_PA}
                    
 
 define AWOann_07S_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_07S_PA{   
         case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
           condition month == OCT .and. wateryear == bgnWY
            sum(i=0,11,1)  AWO_07S_PA(i)*cfs_taf(i)}
         case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
           condition month == MAR .and. wateryear == EndWY
            sum(i=prevOCT,SEP-month,1) AWO_07S_PA(i)*cfs_taf(i)}
         case March { ! March for wateryears BgnWY - year before EndWY
           condition month == MAR .and. wateryear < EndWY
            sum(i=0,11,1)  AWO_07S_PA(i)*cfs_taf(i)}
         case Rest { 
           condition always
           value AWOann_07S_PAdv(-1) } }

goal setAWOann_07S_PAdv {AWOann_07S_PAdv = AWOann_07S_PA}
                   
           
 !Define Annual Demands
 define AWOann_16_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_16_PA{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_16_PA(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_16_PA(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_16_PA(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_16_PAdv(-1) } }

goal setAWOann_16_PAdv {AWOann_16_PAdv = AWOann_16_PA}
                    
           
           
!Define Annual Demands
define AWOann_02_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_02_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_02_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_02_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_02_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_02_SAdv(-1) } }

goal setAWOann_02_SAdv {AWOann_02_SAdv = AWOann_02_SA}
                    

define AWOann_03_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_03_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_03_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_03_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_03_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_03_SAdv(-1) } }

goal setAWOann_03_SAdv {AWOann_03_SAdv = AWOann_03_SA}
                    
          
define AWOann_08N_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_08N_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_08N_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_08N_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_08N_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_08N_SA1dv(-1) } }

goal setAWOann_08N_SA1dv {AWOann_08N_SA1dv = AWOann_08N_SA1}
                    

define AWOann_08N_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_08N_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_08N_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_08N_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_08N_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
           value AWOann_08N_SA2dv(-1) } }

goal setAWOann_08N_SA2dv {AWOann_08N_SA2dv = AWOann_08N_SA2}
                   
 
 define AWOann_08S_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_08S_SA1{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_08S_SA1(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_08S_SA1(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_08S_SA1(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_08S_SA1dv(-1) } }

goal setAWOann_08S_SA1dv {AWOann_08S_SA1dv = AWOann_08S_SA1}
                    
 
 define AWOann_08S_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_08S_SA2{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_08S_SA2(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_08S_SA2(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_08S_SA2(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_08S_SA2dv(-1) } }

goal setAWOann_08S_SA2dv {AWOann_08S_SA2dv = AWOann_08S_SA2}
                    
 
 define AWOann_08S_SA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_08S_SA3{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_08S_SA3(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_08S_SA3(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_08S_SA3(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_08S_SA3dv(-1) } }

goal setAWOann_08S_SA3dv {AWOann_08S_SA3dv = AWOann_08S_SA3}
                    
 
 define AWOann_09_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_09_SA1{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_09_SA1(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_09_SA1(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_09_SA1(i)*cfs_taf(i)}
        case Rest { 
          condition always
          value AWOann_09_SA1dv(-1) } }

goal setAWOann_09_SA1dv {AWOann_09_SA1dv = AWOann_09_SA1}
                    

define AWOann_09_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_09_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_09_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_09_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_09_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_09_SA2dv(-1) } }

goal setAWOann_09_SA2dv {AWOann_09_SA2dv = AWOann_09_SA2}
                    

define AWOann_18_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_18_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_18_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_18_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_18_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_18_SAdv(-1) } }

goal setAWOann_18_SAdv {AWOann_18_SAdv = AWOann_18_SA}
                    

define AWOann_19_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_19_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_19_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_19_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_19_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_19_SAdv(-1) } }

goal setAWOann_19_SAdv {AWOann_19_SAdv = AWOann_19_SA}
                    

define AWOann_21_SAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_21_SA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_21_SA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_21_SA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_21_SA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_21_SAdv(-1) } }

goal setAWOann_21_SAdv {AWOann_21_SAdv = AWOann_21_SA}
                    

define AWOann_22_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_22_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_22_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_22_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_22_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_22_SA1dv(-1) } }

goal setAWOann_22_SA1dv {AWOann_22_SA1dv = AWOann_22_SA1}

define AWOann_08N_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWOann_08N_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_08N_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_08N_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_08N_PR1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWOann_08N_PR1dv(-1) } }

goal setAWOann_08N_PR1dv {AWOann_08N_PR1dv = AWOann_08N_PR1}
                    

define AWOann_08N_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}                  
define AWOann_08N_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWO_08N_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWO_08N_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWO_08N_PR2(i)*cfs_taf(i)}
       case Rest { 
         condition always
           value AWOann_08N_PR2dv(-1) } }

goal setAWOann_08N_PR2dv {AWOann_08N_PR2dv = AWOann_08N_PR2}
                   
 
 define AWOann_08S_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_08S_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_08S_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_08S_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_08S_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_08S_PRdv(-1) } }

goal setAWOann_08S_PRdv {AWOann_08S_PRdv = AWOann_08S_PR}

define AWOann_17N_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_17N_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_17N_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_17N_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_17N_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_17N_PRdv(-1) } }

goal setAWOann_17N_PRdv {AWOann_17N_PRdv = AWOann_17N_PR}
/*
define AWOann_17S_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWOann_17S_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWO_17S_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWO_17S_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWO_17S_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWOann_17S_PRdv(-1) } }

goal setAWOann_17S_PRdv {AWOann_17S_PRdv = AWOann_17S_PR}
*/                                
!**********************************************************************************
!Define Annual Applied Water Demand for Wetlands 
!**********************************************************************************
/*define AWWann_08N_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08N_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08N_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08N_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08N_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08N_PAdv(-1) } }

goal setAWWann_08N_PAdv {AWWann_08N_PAdv = AWWann_08N_PA}
*/
define AWWann_08N_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08N_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08N_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08N_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08N_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08N_SA1dv(-1) } }

goal setAWWann_08N_SA1dv {AWWann_08N_SA1dv = AWWann_08N_SA1}

define AWWann_08N_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08N_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08N_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08N_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08N_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08N_SA2dv(-1) } }

goal setAWWann_08N_SA2dv {AWWann_08N_SA2dv = AWWann_08N_SA2}

define AWWann_08S_SA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08S_SA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08S_SA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08S_SA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08S_SA1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08S_SA1dv(-1) } }

goal setAWWann_08S_SA1dv {AWWann_08S_SA1dv = AWWann_08S_SA1}

define AWWann_08S_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08S_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08S_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08S_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08S_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08S_SA2dv(-1) } }

goal setAWWann_08S_SA2dv {AWWann_08S_SA2dv = AWWann_08S_SA2}
/*
define AWWann_08S_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08S_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08S_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08S_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08S_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08S_PAdv(-1) } }

goal setAWWann_08S_PAdv {AWWann_08S_PAdv = AWWann_08S_PA}
*/
define AWWann_09_SA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_09_SA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_09_SA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_09_SA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_09_SA2(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_09_SA2dv(-1) } }

goal setAWWann_09_SA2dv {AWWann_09_SA2dv = AWWann_09_SA2}
/*
define AWWann_21_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_21_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_21_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_21_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_21_PA(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_21_PAdv(-1) } }

goal setAWWann_21_PAdv {AWWann_21_PAdv = AWWann_21_PA}
*/
define AWWann_08N_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}          
define AWWann_08N_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08N_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08N_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08N_PR1(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_08N_PR1dv(-1) } }

goal setAWWann_08N_PR1dv {AWWann_08N_PR1dv = AWWann_08N_PR1}
                    

define AWWann_08N_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}                  
define AWWann_08N_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_08N_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_08N_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_08N_PR2(i)*cfs_taf(i)}
       case Rest { 
         condition always
           value AWWann_08N_PR2dv(-1) } }

goal setAWWann_08N_PR2dv {AWWann_08N_PR2dv = AWWann_08N_PR2}
                   
 
 define AWWann_08S_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
 define AWWann_08S_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWW_08S_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWW_08S_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWW_08S_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWWann_08S_PRdv(-1) } }

goal setAWWann_08S_PRdv {AWWann_08S_PRdv = AWWann_08S_PR}
                    

define AWWann_09_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}           
define AWWann_09_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
         condition month == OCT .and. wateryear == bgnWY
          sum(i=0,11,1)  AWW_09_PR(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
         condition month == MAR .and. wateryear == EndWY
          sum(i=prevOCT,SEP-month,1) AWW_09_PR(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
         condition month == MAR .and. wateryear < EndWY
          sum(i=0,11,1)  AWW_09_PR(i)*cfs_taf(i)}
       case Rest { 
         condition always
          value AWWann_09_PRdv(-1) } }

goal setAWWann_09_PRdv {AWWann_09_PRdv = AWWann_09_PR}
                              
define AWWann_17N_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'} 
define AWWann_17N_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWW_17N_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWW_17N_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWW_17N_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value AWWann_17N_PRdv(-1) } }
           
 goal setAWWann_17N_PRdv {AWWann_17N_PRdv = AWWann_17N_PR}          
/*           
 define AWWann_17S_PR{   
        case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
          condition month == OCT .and. wateryear == bgnWY
           sum(i=0,11,1)  AWW_17S_PR(i)*cfs_taf(i)}
        case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
          condition month == MAR .and. wateryear == EndWY
           sum(i=prevOCT,SEP-month,1) AWW_17S_PR(i)*cfs_taf(i)}
        case March { ! March for wateryears BgnWY - year before EndWY
          condition month == MAR .and. wateryear < EndWY
           sum(i=0,11,1)  AWW_17S_PR(i)*cfs_taf(i)}
        case Rest { 
          condition always
           value 0.0 } }
*/

! Define diversion requirement
! CVP Agricultural Water Service Contractors
define DR_02_PA   {value  min(CLann_WTPCSD_02_PA, (AWRann_02_PA  *(1 - RUFR_02_PA  + RPF_02_PA)  + AWOann_02_PA  *(1 - RUFO_02_PA  + RPF_02_PA)) *(1-GPmin_02_PA  )/(1 - EVF_WTPCSD_02_PA   - DPF_WTPCSD_02_PA  - LFF_WTPCSD_02_PA  - OSF_WTPCSD_02_PA ))}
define DR_03_PA   {value  min(CLann_SAC294_03_PA, (AWRann_03_PA  *(1 - RUFR_03_PA  + RPF_03_PA)  + AWOann_03_PA  *(1 - RUFO_03_PA  + RPF_03_PA)) *(1-GPmin_03_PA  )/(1 - EVF_SAC294_03_PA   - DPF_SAC294_03_PA  - LFF_SAC294_03_PA  - OSF_SAC294_03_PA ))}
define DR_04_PA1  {value  min(CLann_CCL005_04_PA1,(AWRann_04_PA1 *(1 - RUFR_04_PA1 + RPF_04_PA1) + AWOann_04_PA1 *(1 - RUFO_04_PA1 + RPF_04_PA1))*(1-GPmin_04_PA1 )/(1 - EVF_CCL005_04_PA1  - DPF_CCL005_04_PA1 - LFF_CCL005_04_PA1 - OSF_CCL005_04_PA1 ))}
define DR_04_PA2  {value  min(CLann_TCC022_04_PA2,(AWRann_04_PA2 *(1 - RUFR_04_PA2 + RPF_04_PA2) + AWOann_04_PA2 *(1 - RUFO_04_PA2 + RPF_04_PA2))*(1-GPmin_04_PA2 )/(1 - EVF_TCC022_04_PA2  - DPF_TCC022_04_PA2 - LFF_TCC022_04_PA2 - OSF_TCC022_04_PA2 ))}   
define DR_07N_PA  {value  min(CLann_TCC036_07N_PA,(AWRann_07N_PA *(1 - RUFR_07N_PA + RPF_07N_PA) + AWOann_07N_PA *(1 - RUFO_07N_PA + RPF_07N_PA))*(1-GPmin_07N_PA )/(1 - EVF_TCC036_07N_PA  - DPF_TCC036_07N_PA - LFF_TCC036_07N_PA - OSF_TCC036_07N_PA ))}
define DR_07S_PA  {value  min(CLann_TCC081_07S_PA,(AWRann_07S_PA *(1 - RUFR_07S_PA + RPF_07S_PA) + AWOann_07S_PA *(1 - RUFO_07S_PA + RPF_07S_PA))*(1-GPmin_07S_PA )/(1 - EVF_TCC081_07S_PA  - DPF_TCC081_07S_PA - LFF_TCC081_07S_PA - OSF_TCC081_07S_PA ))}
define DR_16_PA   {value  min(CLann_FTR021_16_PA, (AWRann_16_PA  *(1 - RUFR_16_PA  + RPF_16_PA)  + AWOann_16_PA  *(1 - RUFO_16_PA  + RPF_16_PA)) *(1-GPmin_16_PA  )/(1 - EVF_FTR021_16_PA   - DPF_FTR021_16_PA  - LFF_FTR021_16_PA  - OSF_FTR021_16_PA ))}

define anncvpDR_pag_n {value DR_02_PA + DR_03_PA + DR_04_PA1 + DR_04_PA2 + DR_07N_PA + DR_07S_PA + DR_16_PA}
define anncvpDR_pag_ndv {std kind 'CVP-DIVERSION-REQMT' units 'taf'}
goal totcvpDR_pag_n {anncvpDR_pag_ndv = anncvpDR_pag_n}

! CVP Urban Water Service Contractors
define DR_02_PU   {value  min(CLann_WTPCSD_02_PU + CLann_WKYTN_02_PU, (UDann_02_PU  *(1-GPmin_02_PU  ))/(1 - EF_WTPCSD_02_PU  - SF_WTPCSD_02_PU))}    
!define DR_03_PU3  {value  min(CLann_WTPBUK_03_PU3,                    (UDann_03_PU3 *(1-GPmin_03_PU3 ))/(1 - EF_WTPBUK_03_PU3 - SF_WTPBUK_03_PU3))}  
define DR_03_PU1  {value  min(CLann_SHSTA_03_PU1,                     (UDann_03_PU1 *(1-GPmin_03_PU1 ))/(1 - EF_WTPJMS_03_PU1 - SF_WTPJMS_03_PU1))}  
define DR_03_PU2  {value  min(CLann_WTPBLV_03_PU2,                    (UDann_03_PU2 *(1-GPmin_03_PU2 ))/(1 - EF_WTPBLV_03_PU2 - SF_WTPBLV_03_PU2))}

! American River
define anncvpDR_wf_n   {value CLann_FOLSM_PCWA_ + CLann_FOLSM_WTPEDH_ + CLann_FOLSM_WTPFOL_ + CLann_FOLSM_WTPSJP_ + CLann_FSC025_60N_PU_ + CLann_WTPCOL_26S_PU2_ + CLann_WTPSACVNY_SCWA_ + CLann_FOLSM_WTPRSV_ + CLann_FPT013_EBMUD_ }
define anncvpDR_wf_ndv {std kind 'CVP-DIVERSION-REQMT' units 'taf'}
goal totcvpDR_wf_n     {anncvpDR_wf_ndv = anncvpDR_wf_n}

define anncvpDR_pmi_n   {value DR_02_PU + DR_03_PU1 + DR_03_PU2} !+ DR_03_PU3
define anncvpDR_pmi_ndv {std kind 'CVP-DIVERSION-REQMT' units 'taf'}
goal totcvpDR_pmi_n     {anncvpDR_pmi_ndv = anncvpDR_pmi_n}

! CVP Settlement Contractors (for multiple diversions assume losses the same to simplify code)
define DR_02_SA      {value  min(CLP_SAC296_02_SA   + CLN_SAC296_02_SA,  (AWRann_02_SA   *(1 - RUFR_02_SA   + RPF_02_SA)   +AWOann_02_SA   *(1- RUFO_02_SA   + RPF_02_SA))*(1-GPmin_02_SA )  /(1 - EVF_SAC296_02_SA   - DPF_SAC296_02_SA  - LFF_SAC296_02_SA   - OSF_SAC296_02_SA ))}  
define DR_03_SA      {value  min(CLP_SAC289_03_SA   + CLN_SAC289_03_SA,  (AWRann_03_SA   *(1 - RUFR_03_SA   + RPF_03_SA)   +AWOann_03_SA   *(1- RUFO_03_SA   + RPF_03_SA))*(1-GPmin_03_SA )  /(1 - EVF_SAC289_03_SA   - DPF_SAC289_03_SA  - LFF_SAC289_03_SA   - OSF_SAC289_03_SA ))}
define DR_08N_SA1_A  {value  min(CLP_SAC178_08N_SA1 + CLN_SAC178_08N_SA1,(AWRann_08N_SA1 *(1 - RUFR_08N_SA1 + RPF_08N_SA1) +AWOann_08N_SA1 *(1- RUFO_08N_SA1 + RPF_08N_SA1) + AWwann_08N_SA1 *(1 - RUFw_08N_SA1 + RPF_08N_SA1))*(1-GPmin_08N_SA1)/(1 - EVF_SAC178_08N_SA1  - DPF_SAC178_08N_SA1 - LFF_SAC178_08N_SA1 - OSF_SAC178_08N_SA1))}
define DR_08N_SA1_B  {value  min(CLP_SAC159_08N_SA1 + CLN_SAC159_08N_SA1,(AWRann_08N_SA1 *(1 - RUFR_08N_SA1 + RPF_08N_SA1) +AWOann_08N_SA1 *(1- RUFO_08N_SA1 + RPF_08N_SA1) + AWwann_08N_SA1 *(1 - RUFw_08N_SA1 + RPF_08N_SA1))*(1-GPmin_08N_SA1)/(1 - EVF_SAC159_08N_SA1  - DPF_SAC159_08N_SA1 - LFF_SAC159_08N_SA1 - OSF_SAC159_08N_SA1))}
define DR_08N_SA2    {value  min(CLP_GCC027_08N_SA2 + CLN_GCC027_08N_SA2,(AWRann_08N_SA2 *(1 - RUFR_08N_SA2 + RPF_08N_SA2) +AWOann_08N_SA2 *(1- RUFO_08N_SA2 + RPF_08N_SA2) + AWwann_08N_SA2 *(1 - RUFw_08N_SA2 + RPF_08N_SA2))*(1-GPmin_08N_SA2)/(1 - EVF_GCC027_08N_SA2  - DPF_GCC027_08N_SA2 - LFF_GCC027_08N_SA2 - OSF_GCC027_08N_SA2))}
define DR_08S_SA1    {value  min(CLP_SAC159_08S_SA1 + CLN_SAC159_08S_SA1,(AWRann_08S_SA1 *(1 - RUFR_08S_SA1 + RPF_08S_SA1) +AWOann_08S_SA1 *(1- RUFO_08S_SA1 + RPF_08S_SA1) + AWwann_08S_SA1 *(1 - RUFw_08S_SA1 + RPF_08S_SA1))*(1-GPmin_08S_SA1)/(1 - EVF_SAC159_08S_SA1  - DPF_SAC159_08S_SA1 - LFF_SAC159_08S_SA1 - OSF_SAC159_08S_SA1))}
define DR_08S_SA2    {value  min(CLP_GCC056_08S_SA2 + CLN_GCC056_08S_SA2,(AWRann_08S_SA2 *(1 - RUFR_08S_SA2 + RPF_08S_SA2) +AWOann_08S_SA2 *(1- RUFO_08S_SA2 + RPF_08S_SA2) + AWwann_08S_SA2 *(1 - RUFw_08S_SA2 + RPF_08S_SA2))*(1-GPmin_08S_SA2)/(1 - EVF_GCC056_08S_SA2  - DPF_GCC056_08S_SA2 - LFF_GCC056_08S_SA2 - OSF_GCC056_08S_SA2))}
define DR_08S_SA3_A  {value  min(CLP_SAC121_08S_SA3 + CLN_SAC121_08S_SA3,(AWRann_08S_SA3 *(1 - RUFR_08S_SA3 + RPF_08S_SA3) +AWOann_08S_SA3 *(1- RUFO_08S_SA3 + RPF_08S_SA3))*(1-GPmin_08S_SA3) /(1 - EVF_SAC121_08S_SA3 - DPF_SAC121_08S_SA3 - LFF_SAC121_08S_SA3 - OSF_SAC121_08S_SA3 ))}
define DR_08S_SA3_B  {value  min(CLP_SAC109_08S_SA3 + CLN_SAC109_08S_SA3,(AWRann_08S_SA3 *(1 - RUFR_08S_SA3 + RPF_08S_SA3) +AWOann_08S_SA3 *(1- RUFO_08S_SA3 + RPF_08S_SA3))*(1-GPmin_08S_SA3) /(1 - EVF_SAC109_08S_SA3 - DPF_SAC109_08S_SA3 - LFF_SAC109_08S_SA3 - OSF_SAC109_08S_SA3 ))}
define DR_09_SA1     {value  min(CLP_MTC000_09_SA1  + CLN_MTC000_09_SA1, (AWRann_09_SA1  *(1 - RUFR_09_SA1  + RPF_09_SA1)  +AWOann_09_SA1  *(1- RUFO_09_SA1  + RPF_09_SA1)) *(1-GPmin_09_SA1)  /(1 - EVF_MTC000_09_SA1  - DPF_MTC000_09_SA1  - LFF_MTC000_09_SA1  - OSF_MTC000_09_SA1  ))}
define DR_09_SA2     {value  min(CLP_SAC162_09_SA2  + CLN_SAC162_09_SA2, (AWRann_09_SA2  *(1 - RUFR_09_SA2  + RPF_09_SA2)  +AWOann_09_SA2  *(1- RUFO_09_SA2  + RPF_09_SA2)) *(1-GPmin_09_SA2)  /(1 - EVF_SAC162_09_SA2  - DPF_SAC162_09_SA2  - LFF_SAC162_09_SA2  - OSF_SAC162_09_SA2  ))}
define DR_18_SA      {value  min(CLP_SAC136_18_SA   + CLN_SAC136_18_SA,  (AWRann_18_SA   *(1 - RUFR_18_SA   + RPF_18_SA)   +AWOann_18_SA   *(1- RUFO_18_SA   + RPF_18_SA))  *(1-GPmin_18_SA )  /(1 - EVF_SAC136_18_SA   - DPF_SAC136_18_SA   - LFF_SAC136_18_SA   - OSF_SAC136_18_SA   ))}
define DR_19_SA_A    {value  min(CLP_SAC122_19_SA   + CLN_SAC122_19_SA,  (AWRann_19_SA   *(1 - RUFR_19_SA   + RPF_19_SA)   +AWOann_19_SA   *(1- RUFO_19_SA   + RPF_19_SA))  *(1-GPmin_19_SA )  /(1 - EVF_SAC122_19_SA   - DPF_SAC122_19_SA   - LFF_SAC122_19_SA   - OSF_SAC122_19_SA   ))}
define DR_19_SA_B    {value  min(CLP_SAC115_19_SA   + CLN_SAC115_19_SA,  (AWRann_19_SA   *(1 - RUFR_19_SA   + RPF_19_SA)   +AWOann_19_SA   *(1- RUFO_19_SA   + RPF_19_SA))  *(1-GPmin_19_SA )  /(1 - EVF_SAC115_19_SA   - DPF_SAC115_19_SA   - LFF_SAC115_19_SA   - OSF_SAC115_19_SA   ))}
define DR_19_SA_C    {value  min(CLP_SAC099_19_SA   + CLN_SAC099_19_SA,  (AWRann_19_SA   *(1 - RUFR_19_SA   + RPF_19_SA)   +AWOann_19_SA   *(1- RUFO_19_SA   + RPF_19_SA))  *(1-GPmin_19_SA )  /(1 - EVF_SAC099_19_SA   - DPF_SAC099_19_SA   - LFF_SAC099_19_SA   - OSF_SAC099_19_SA   ))}
define DR_19_SA_D    {value  min(CLP_SAC091_19_SA   + CLN_SAC091_19_SA,  (AWRann_19_SA   *(1 - RUFR_19_SA   + RPF_19_SA)   +AWOann_19_SA   *(1- RUFO_19_SA   + RPF_19_SA))  *(1-GPmin_19_SA )  /(1 - EVF_SAC091_19_SA   - DPF_SAC091_19_SA   - LFF_SAC091_19_SA   - OSF_SAC091_19_SA   ))}
define DR_21_SA_A    {value  min(CLP_SAC083_21_SA   + CLN_SAC083_21_SA,  (AWRann_21_SA   *(1 - RUFR_21_SA   + RPF_21_SA)   +AWOann_21_SA   *(1- RUFO_21_SA   + RPF_21_SA))  *(1-GPmin_21_SA )  /(1 - EVF_SAC083_21_SA   - DPF_SAC083_21_SA   - LFF_SAC083_21_SA   - OSF_SAC083_21_SA   ))}
define DR_21_SA_B    {value  min(CLP_SAC074_21_SA   + CLN_SAC074_21_SA,  (AWRann_21_SA   *(1 - RUFR_21_SA   + RPF_21_SA)   +AWOann_21_SA   *(1- RUFO_21_SA   + RPF_21_SA))  *(1-GPmin_21_SA )  /(1 - EVF_SAC074_21_SA   - DPF_SAC074_21_SA   - LFF_SAC074_21_SA   - OSF_SAC074_21_SA   ))}
define DR_22_SA1_A   {value  min(CLP_SAC082_22_SA1  + CLN_SAC082_22_SA1, (AWRann_22_SA1  *(1 - RUFR_22_SA1  + RPF_22_SA1)  +AWOann_22_SA1  *(1- RUFO_22_SA1  + RPF_22_SA1)) *(1-GPmin_22_SA1)  /(1 - EVF_SAC082_22_SA1  - DPF_SAC082_22_SA1  - LFF_SAC082_22_SA1  - OSF_SAC082_22_SA1  ))}
define DR_22_SA1_B   {value  min(CLP_SAC078_22_SA1  + CLN_SAC078_22_SA1, (AWRann_22_SA1  *(1 - RUFR_22_SA1  + RPF_22_SA1)  +AWOann_22_SA1  *(1- RUFO_22_SA1  + RPF_22_SA1)) *(1-GPmin_22_SA1)  /(1 - EVF_SAC078_22_SA1  - DPF_SAC078_22_SA1  - LFF_SAC078_22_SA1  - OSF_SAC078_22_SA1  ))}
define DR_03_SU      {value  min(CLP_WTPFTH_03_SU   + CLN_WTPFTH_03_SU + CLann_WTPBUK_03_SU,  UDann_03_SU   *(1-GPmin_03_SU ) *(1 + EF_WTPFTH_03_SU  + SF_WTPFTH_03_SU + EF_WTPBUK_03_SU - SF_WTPBUK_03_SU))}
define DR_02_SU      {value  min(CLP_WTPFTH_02_SU   + CLN_WTPFTH_02_SU,  UDann_02_SU   *(1-GPmin_02_SU ) *(1 + EF_WTPFTH_02_SU  + SF_WTPFTH_02_SU ))}

define anncvpDR_psc_n   {value DR_02_SA + DR_03_SA + DR_08N_SA1_A + DR_08N_SA1_B + DR_08N_SA2 + DR_08S_SA1 +  DR_08S_SA2 + DR_08S_SA3_A + DR_08S_SA3_B + DR_09_SA1 + DR_09_SA2 + DR_18_SA + DR_19_SA_A + DR_19_SA_B + DR_19_SA_C + DR_19_SA_D + DR_21_SA_A + DR_21_SA_B + DR_22_SA1_A + DR_22_SA1_B + DR_03_SU + DR_02_SU}
define anncvpDR_psc_ndv {std kind 'CVP-DIVERSION-REQMT' units 'taf'}
goal totcvpDR_psc_n     {anncvpDR_psc_ndv = anncvpDR_psc_n}

! Refuges
define DR_08N_PR1   {value  min(CLann_GCC027_08N_PR1,(AWRann_08N_PR1 *(1 - RUFR_08N_PR1) + AWOann_08N_PR1 *(1 - RUFO_08N_PR1 + RPF_08N_PR1) + AWWann_08N_PR1 *(1 - RUFW_08N_PR1 + RPF_08N_PR1))*(1-GPmin_08N_PR1)/(1 - EVF_GCC027_08N_PR1  - DPF_GCC027_08N_PR1 - LFF_GCC027_08N_PR1 - OSF_GCC027_08N_PR1))}
define DR_08N_PR2   {value  min(CLann_GCC039_08N_PR2,(AWRann_08N_PR2 *(1 - RUFR_08N_PR2) + AWOann_08N_PR2 *(1 - RUFO_08N_PR2 + RPF_08N_PR2) + AWWann_08N_PR2 *(1 - RUFW_08N_PR2 + RPF_08N_PR2))*(1-GPmin_08N_PR2)/(1 - EVF_GCC039_08N_PR2  - DPF_GCC039_08N_PR2 - LFF_GCC039_08N_PR2 - OSF_GCC039_08N_PR2))}
define DR_08S_PR_A  {value  min(CLann_GCC056_08S_PR, (AWRann_08S_PR  *(1 - RUFR_08S_PR ) + AWOann_08S_PR  *(1 - RUFO_08S_PR  + RPF_08S_PR ) + AWWann_08S_PR  *(1 - RUFW_08S_PR  + RPF_08S_PR ))*(1-GPmin_08S_PR )/(1 - EVF_GCC056_08S_PR   - DPF_GCC056_08S_PR  - LFF_GCC056_08S_PR  - OSF_GCC056_08S_PR ))}
define DR_08S_PR_B  {value  min(CLann_CBD037_08S_PR, (AWRann_08S_PR  *(1 - RUFR_08S_PR ) + AWOann_08S_PR  *(1 - RUFO_08S_PR  + RPF_08S_PR ) + AWWann_08S_PR  *(1 - RUFW_08S_PR  + RPF_08S_PR ))*(1-GPmin_08S_PR )/(1 - EVF_CBD037_08S_PR   - DPF_CBD037_08S_PR  - LFF_CBD037_08S_PR  - OSF_CBD037_08S_PR ))}
define DR_17N_PR    {value  min(CLann_JBC002_17N_PR, (AWRann_17N_PR  *(1- RUFR_17N_PR)   + AWOann_17N_PR  *(1 - RUFO_17N_PR  + RPF_17N_PR ) + AWWann_17N_PR  *(1 - RUFW_17N_PR  + RPF_17N_PR ))*(1-GPmin_17N_PR )/(1 - EVF_JBC002_17N_PR   - DPF_JBC002_17N_PR  - LFF_JBC002_17N_PR  - OSF_JBC002_17N_PR ))}
!define DR_17S_PR   {value  min(CLann_SBP028_17S_PR, (AWRann_17S_PR  *(1- RUFR_17S_PR)   + AWOann_17S_PR  *(1 - RUFO_17S_PR  + RPF_17S_PR ) + AWWann_17S_PR  *(1 - RUFW_17S_PR  + RPF_17S_PR ))*(1-GPmin_17S_PR )/(1 - EVF_SBP028_17S_PR   - DPF_SBP028_17S_PR  - LFF_SBP028_17S_PR  - OSF_SBP028_17S_PR ))}
                                                                      
define anncvpDR_prf_n   {value  DR_08N_PR1 + DR_08N_PR2 + DR_08S_PR_A + DR_08S_PR_B + DR_17N_PR /*+ DR_17S_PR*/}
define anncvpDR_prf_ndv {std kind 'CVP-DIVERSION-REQMT' units 'taf'}
goal totcvpDR_prf_n     {anncvpDR_prf_ndv = anncvpDR_prf_n}


!******************************************************************************
! Define applied water demands for SOD SJR-Westside demands

!******************************************************************************
! Annual applied Water demands for Rice crops

define AWRann_50_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_50_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_50_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_50_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_50_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_50_PA1dv(-1) } }
goal setAWRann_50_PA1dv {AWRann_50_PA1dv = AWRann_50_PA1}

define AWRann_71_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA1dv(-1) } }
goal setAWRann_71_PA1dv {AWRann_71_PA1dv = AWRann_71_PA1}

define AWRann_71_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA2dv(-1) } }
goal setAWRann_71_PA2dv {AWRann_71_PA2dv = AWRann_71_PA2}

define AWRann_71_PA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA3dv(-1) } }
goal setAWRann_71_PA3dv {AWRann_71_PA3dv = AWRann_71_PA3}

define AWRann_71_PA4dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA4{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA4(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA4(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA4(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA4dv(-1) } }
goal setAWRann_71_PA4dv {AWRann_71_PA4dv = AWRann_71_PA4}


define AWRann_71_PA5dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA5{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA5(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA5(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA5(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA5dv(-1) } }
goal setAWRann_71_PA5dv {AWRann_71_PA5dv = AWRann_71_PA5}

define AWRann_71_PA6dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA6{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA6(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA6(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA6(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA6dv(-1) } }
goal setAWRann_71_PA6dv {AWRann_71_PA6dv = AWRann_71_PA6}

define AWRann_71_PA8dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_71_PA8{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_71_PA8(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_71_PA8(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_71_PA8(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_71_PA8dv(-1) } }
goal setAWRann_71_PA8dv {AWRann_71_PA8dv = AWRann_71_PA8}

define AWRann_72_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PAdv(-1) } }
goal setAWRann_72_PAdv {AWRann_72_PAdv = AWRann_72_PA}

define AWRann_73_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_73_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_73_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_73_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_73_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_73_PA1dv(-1) } }
goal setAWRann_73_PA1dv {AWRann_73_PA1dv = AWRann_73_PA1}

define AWRann_73_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_73_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_73_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_73_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_73_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_73_PA2dv(-1) } }
goal setAWRann_73_PA2dv {AWRann_73_PA2dv = AWRann_73_PA2}

define AWRann_73_PA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_73_PA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_73_PA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_73_PA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_73_PA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_73_PA3dv(-1) } }
goal setAWRann_73_PA3dv {AWRann_73_PA3dv = AWRann_73_PA3}

define AWRann_90_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_90_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_90_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_90_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_90_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_90_PA1dv(-1) } }
goal setAWRann_90_PA1dv {AWRann_90_PA1dv = AWRann_90_PA1}

define AWRann_90_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_90_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_90_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_90_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_90_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_90_PA2dv(-1) } }
goal setAWRann_90_PA2dv {AWRann_90_PA2dv = AWRann_90_PA2}

define AWRann_91_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_91_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_91_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_91_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_91_PA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_91_PAdv(-1) } }
goal setAWRann_91_PAdv {AWRann_91_PAdv = AWRann_91_PA}

define AWRann_64_XAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_64_XA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_64_XA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_64_XA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_64_XA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_64_XAdv(-1) } }
goal setAWRann_64_XAdv {AWRann_64_XAdv = AWRann_64_XA}

define AWRann_72_XA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_XA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_XA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_XA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_XA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_XA1dv(-1) } }
goal setAWRann_72_XA1dv {AWRann_72_XA1dv = AWRann_72_XA1}

define AWRann_72_XA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_XA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_XA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_XA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_XA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_XA2dv(-1) } }
goal setAWRann_72_XA2dv {AWRann_72_XA2dv = AWRann_72_XA2}

define AWRann_72_XA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_XA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_XA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_XA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_XA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_XA3dv(-1) } }
goal setAWRann_72_XA3dv {AWRann_72_XA3dv = AWRann_72_XA3}

define AWRann_73_XAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_73_XA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_73_XA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_73_XA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_73_XA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_73_XAdv(-1) } }
goal setAWRann_73_XAdv {AWRann_73_XAdv = AWRann_73_XA}

define AWRann_72_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR1dv(-1) } }
goal setAWRann_72_PR1dv {AWRann_72_PR1dv = AWRann_72_PR1}

define AWRann_72_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR2dv(-1) } }
goal setAWRann_72_PR2dv {AWRann_72_PR2dv = AWRann_72_PR2}

define AWRann_72_PR3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR3dv(-1) } }
goal setAWRann_72_PR3dv {AWRann_72_PR3dv = AWRann_72_PR3}

define AWRann_72_PR4dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR4{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR4(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR4(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR4(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR4dv(-1) } }
goal setAWRann_72_PR4dv {AWRann_72_PR4dv = AWRann_72_PR4}

define AWRann_72_PR5dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR5{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR5(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR5(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR5(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR5dv(-1) } }
goal setAWRann_72_PR5dv {AWRann_72_PR5dv = AWRann_72_PR5}

define AWRann_72_PR6dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_72_PR6{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_72_PR6(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_72_PR6(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_72_PR6(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_72_PR6dv(-1) } }
goal setAWRann_72_PR6dv {AWRann_72_PR6dv = AWRann_72_PR6}

define AWRann_91_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWRann_91_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWR_91_PR(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWR_91_PR(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWR_91_PR(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWRann_91_PRdv(-1) } }
goal setAWRann_91_PRdv {AWRann_91_PRdv = AWRann_91_PR}

!******************************************************************************
! Annual applied water demands for crops other than rice

define AWOann_50_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_50_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_50_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_50_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_50_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_50_PA1dv(-1) } }
goal setAWOann_50_PA1dv {AWOann_50_PA1dv = AWOann_50_PA1}

define AWOann_71_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA1dv(-1) } }
goal setAWOann_71_PA1dv {AWOann_71_PA1dv = AWOann_71_PA1}

define AWOann_71_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA2dv(-1) } }
goal setAWOann_71_PA2dv {AWOann_71_PA2dv = AWOann_71_PA2}

define AWOann_71_PA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA3dv(-1) } }
goal setAWOann_71_PA3dv {AWOann_71_PA3dv = AWOann_71_PA3}

define AWOann_71_PA4dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA4{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA4(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA4(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA4(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA4dv(-1) } }
goal setAWOann_71_PA4dv {AWOann_71_PA4dv = AWOann_71_PA4}

define AWOann_71_PA5dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA5{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA5(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA5(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA5(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA5dv(-1) } }
goal setAWOann_71_PA5dv {AWOann_71_PA5dv = AWOann_71_PA5}

define AWOann_71_PA6dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA6{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA6(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA6(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA6(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA6dv(-1) } }
goal setAWOann_71_PA6dv {AWOann_71_PA6dv = AWOann_71_PA6}

define AWOann_71_PA8dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_71_PA8{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_71_PA8(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_71_PA8(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_71_PA8(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_71_PA8dv(-1) } }
goal setAWOann_71_PA8dv {AWOann_71_PA8dv = AWOann_71_PA8}

define AWOann_72_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PAdv(-1) } }
goal setAWOann_72_PAdv {AWOann_72_PAdv = AWOann_72_PA}

define AWOann_73_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_73_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_73_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_73_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_73_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_73_PA1dv(-1) } }
goal setAWOann_73_PA1dv {AWOann_73_PA1dv = AWOann_73_PA1}

define AWOann_73_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_73_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_73_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_73_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_73_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_73_PA2dv(-1) } }
goal setAWOann_73_PA2dv {AWOann_73_PA2dv = AWOann_73_PA2}

define AWOann_73_PA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_73_PA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_73_PA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_73_PA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_73_PA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_73_PA3dv(-1) } }
goal setAWOann_73_PA3dv {AWOann_73_PA3dv = AWOann_73_PA3}

define AWOann_90_PA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_90_PA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_90_PA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_90_PA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_90_PA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_90_PA1dv(-1) } }
goal setAWOann_90_PA1dv {AWOann_90_PA1dv = AWOann_90_PA1}

define AWOann_90_PA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_90_PA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_90_PA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_90_PA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_90_PA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_90_PA2dv(-1) } }
goal setAWOann_90_PA2dv {AWOann_90_PA2dv = AWOann_90_PA2}

define AWOann_91_PAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_91_PA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_91_PA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_91_PA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_91_PA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_91_PAdv(-1) } }
goal setAWOann_91_PAdv {AWOann_91_PAdv = AWOann_91_PA}

define AWOann_64_XAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_64_XA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_64_XA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_64_XA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_64_XA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_64_XAdv(-1) } }
goal setAWOann_64_XAdv {AWOann_64_XAdv = AWOann_64_XA}

define AWOann_72_XA1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_XA1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_XA1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_XA1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_XA1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_XA1dv(-1) } }
goal setAWOann_72_XA1dv {AWOann_72_XA1dv = AWOann_72_XA1}

define AWOann_72_XA2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_XA2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_XA2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_XA2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_XA2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_XA2dv(-1) } }
goal setAWOann_72_XA2dv {AWOann_72_XA2dv = AWOann_72_XA2}

define AWOann_72_XA3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_XA3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_XA3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_XA3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_XA3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_XA3dv(-1) } }
goal setAWOann_72_XA3dv {AWOann_72_XA3dv = AWOann_72_XA3}

define AWOann_73_XAdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_73_XA{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_73_XA(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_73_XA(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_73_XA(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_73_XAdv(-1) } }
goal setAWOann_73_XAdv {AWOann_73_XAdv = AWOann_73_XA}

define AWOann_72_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR1dv(-1) } }
goal setAWOann_72_PR1dv {AWOann_72_PR1dv = AWOann_72_PR1}

define AWOann_72_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR2dv(-1) } }
goal setAWOann_72_PR2dv {AWOann_72_PR2dv = AWOann_72_PR2}

define AWOann_72_PR3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR3dv(-1) } }
goal setAWOann_72_PR3dv {AWOann_72_PR3dv = AWOann_72_PR3}

define AWOann_72_PR4dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR4{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR4(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR4(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR4(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR4dv(-1) } }
goal setAWOann_72_PR4dv {AWOann_72_PR4dv = AWOann_72_PR4}

define AWOann_72_PR5dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR5{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR5(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR5(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR5(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR5dv(-1) } }
goal setAWOann_72_PR5dv {AWOann_72_PR5dv = AWOann_72_PR5}

define AWOann_72_PR6dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_72_PR6{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_72_PR6(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_72_PR6(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_72_PR6(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_72_PR6dv(-1) } }
goal setAWOann_72_PR6dv {AWOann_72_PR6dv = AWOann_72_PR6}

define AWOann_91_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWOann_91_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWO_91_PR(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWO_91_PR(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWO_91_PR(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWOann_91_PRdv(-1) } }
goal setAWOann_91_PRdv {AWOann_91_PRdv = AWOann_91_PR}

!******************************************************************************
! Annual applied water demand for Refuge Wetlands

define AWWann_72_PR1dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR1{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR1(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR1(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR1(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR1dv(-1) } }
goal setAWWann_72_PR1dv {AWWann_72_PR1dv = AWWann_72_PR1}

define AWWann_72_PR2dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR2{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR2(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR2(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR2(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR2dv(-1) } }
goal setAWWann_72_PR2dv {AWWann_72_PR2dv = AWWann_72_PR2}

define AWWann_72_PR3dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR3{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR3(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR3(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR3(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR3dv(-1) } }
goal setAWWann_72_PR3dv {AWWann_72_PR3dv = AWWann_72_PR3}

define AWWann_72_PR4dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR4{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR4(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR4(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR4(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR4dv(-1) } }
goal setAWWann_72_PR4dv {AWWann_72_PR4dv = AWWann_72_PR4}

define AWWann_72_PR5dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR5{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR5(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR5(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR5(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR5dv(-1) } }
goal setAWWann_72_PR5dv {AWWann_72_PR5dv = AWWann_72_PR5}

define AWWann_72_PR6dv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_72_PR6{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_72_PR6(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_72_PR6(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_72_PR6(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_72_PR6dv(-1) } }
goal setAWWann_72_PR6dv {AWWann_72_PR6dv = AWWann_72_PR6}

define AWWann_91_PRdv {std kind 'ANNUAL-APPLIED-WATER' units 'taf'}
define AWWann_91_PR{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
                sum(i=0,11,1)  AWW_91_PR(i)*cfs_taf(i)}
       case MarEndWY {  ! special case for last wateryear, Sum Oct-Sep
            condition month == MAR .and. wateryear == EndWY
                sum(i=prevOCT,SEP-month,1) AWW_91_PR(i)*cfs_taf(i)}
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR .and. wateryear < EndWY
                sum(i=0,11,1)  AWW_91_PR(i)*cfs_taf(i)}
       case Rest { 
            condition always
                value AWWann_91_PRdv(-1) } }
goal setAWWann_91_PRdv {AWWann_91_PRdv = AWWann_91_PR}


!******************************************************************************
! use the annual total Applied Water demands calcuated above to determine the 
! diversion requirements for each SOD demand

define DR_50_PA1  {value min(CL_50_PA1, (AWRann_50_PA1*(1 - RUFR_50_PA1 + RPF_50_PA1) + AWOann_50_PA1*(1 - RUFO_50_PA1 + RPF_50_PA1))*(1-GPmin_50_PA1)/(1 - EVF_DMC021_50_PA1   - DPF_DMC021_50_PA1  - LFF_DMC021_50_PA1  - OSF_DMC021_50_PA1 ))}
define DR_71_PA1  {value min(CL_71_PA1, (AWRann_71_PA1*(1 - RUFR_71_PA1 + RPF_71_PA1) + AWOann_71_PA1*(1 - RUFO_71_PA1 + RPF_71_PA1))*(1-GPmin_71_PA1)/(1 - EVF_DMC030_71_PA1   - DPF_DMC030_71_PA1  - LFF_DMC030_71_PA1  - OSF_DMC030_71_PA1 ))}
define DR_71_PA2  {value min(CL_71_PA2, (AWRann_71_PA2*(1 - RUFR_71_PA2 + RPF_71_PA2) + AWOann_71_PA2*(1 - RUFO_71_PA2 + RPF_71_PA2))*(1-GPmin_71_PA2)/(1 - EVF_DMC034_71_PA2   - DPF_DMC034_71_PA2  - LFF_DMC034_71_PA2  - OSF_DMC034_71_PA2 ))}
define DR_71_PA3  {value min(CL_71_PA3, (AWRann_71_PA3*(1 - RUFR_71_PA3 + RPF_71_PA3) + AWOann_71_PA3*(1 - RUFO_71_PA3 + RPF_71_PA3))*(1-GPmin_71_PA3)/(1 - EVF_DMC034_71_PA3   - DPF_DMC034_71_PA3  - LFF_DMC034_71_PA3  - OSF_DMC034_71_PA3 ))}
define DR_71_PA4b {value min(CL_71_PA4b,(AWRann_71_PA4*(1 - RUFR_71_PA4 + RPF_71_PA4) + AWOann_71_PA4*(1 - RUFO_71_PA4 + RPF_71_PA4))*(1-GPmin_71_PA4)/(1 - EVF_DMC044_71_PA4   - DPF_DMC044_71_PA4  - LFF_DMC044_71_PA4  - OSF_DMC044_71_PA4 ))}
define DR_71_PA4a {value min(CL_71_PA4a,(AWRann_71_PA4*(1 - RUFR_71_PA4 + RPF_71_PA4) + AWOann_71_PA4*(1 - RUFO_71_PA4 + RPF_71_PA4))*(1-GPmin_71_PA4)/(1 - EVF_DMC044_71_PA4   - DPF_DMC044_71_PA4  - LFF_DMC044_71_PA4  - OSF_DMC044_71_PA4 ) - DR_71_PA4b)}
define DR_71_PA5  {value min(CL_71_PA5, (AWRann_71_PA5*(1 - RUFR_71_PA5 + RPF_71_PA5) + AWOann_71_PA5*(1 - RUFO_71_PA5 + RPF_71_PA5))*(1-GPmin_71_PA5)/(1 - EVF_DMC044_71_PA5   - DPF_DMC044_71_PA5  - LFF_DMC044_71_PA5  - OSF_DMC044_71_PA5 ))}
define DR_71_PA6  {value min(CL_71_PA6, (AWRann_71_PA6*(1 - RUFR_71_PA6 + RPF_71_PA6) + AWOann_71_PA6*(1 - RUFO_71_PA6 + RPF_71_PA6))*(1-GPmin_71_PA6)/(1 - EVF_DMC064_71_PA6   - DPF_DMC064_71_PA6  - LFF_DMC064_71_PA6  - OSF_DMC064_71_PA6 ))}
define DR_71_PA8  {value min(CL_71_PA8, (AWRann_71_PA8*(1 - RUFR_71_PA8 + RPF_71_PA8) + AWOann_71_PA8*(1 - RUFO_71_PA8 + RPF_71_PA8))*(1-GPmin_71_PA8)/(1 - EVF_DMC011_71_PA8   - DPF_DMC011_71_PA8  - LFF_DMC011_71_PA8  - OSF_DMC011_71_PA8 ))}
define DR_72_PA   {value min(CL_72_PA,  (AWRann_72_PA *(1 - RUFR_72_PA  + RPF_72_PA ) + AWOann_72_PA *(1 - RUFO_72_PA  + RPF_72_PA ))*(1-GPmin_72_PA )/(1 - EVF_XCC025_72_PA    - DPF_XCC025_72_PA   - LFF_XCC025_72_PA   - OSF_XCC025_72_PA  ))}
define DR_73_PA1  {value min(CL_73_PA1, (AWRann_73_PA1*(1 - RUFR_73_PA1 + RPF_73_PA1) + AWOann_73_PA1*(1 - RUFO_73_PA1  + RPF_73_PA1))*(1-GPmin_73_PA1)/(1 - EVF_DMC070_73_PA1   - DPF_DMC070_73_PA1  - LFF_DMC070_73_PA1  - OSF_DMC070_73_PA1 ))}
define DR_73_PA2  {value min(CL_73_PA2, (AWRann_73_PA2*(1 - RUFR_73_PA2 + RPF_73_PA2) + AWOann_73_PA2*(1 - RUFO_73_PA2 + RPF_73_PA2))*(1-GPmin_73_PA2)/(1 - EVF_DMC105_73_PA2   - DPF_DMC105_73_PA2  - LFF_DMC105_73_PA2  - OSF_DMC105_73_PA2 ))}
define DR_73_PA3  {value min(CL_73_PA3, (AWRann_73_PA3*(1 - RUFR_73_PA3 + RPF_73_PA3) + AWOann_73_PA3*(1 - RUFO_73_PA3 + RPF_73_PA3))*(1-GPmin_73_PA3)/(1 - EVF_DMC091_73_PA3   - DPF_DMC091_73_PA3  - LFF_DMC091_73_PA3  - OSF_DMC091_73_PA3 ))}
define DR_90_PA1  {value min(CL_90_PA1, (AWRann_90_PA1*(1 - RUFR_90_PA1 + RPF_90_PA1) + AWOann_90_PA1*(1 - RUFO_90_PA1 + RPF_90_PA1))*(1-GPmin_90_PA1)/(1 - EVF_CAA143_90_PA1   - DPF_CAA143_90_PA1  - LFF_CAA143_90_PA1  - OSF_CAA143_90_PA1 ))}
define DR_90_PA2  {value min(CL_90_PA2, (AWRann_90_PA2*(1 - RUFR_90_PA2 + RPF_90_PA2) + AWOann_90_PA2*(1 - RUFO_90_PA2 + RPF_90_PA2))*(1-GPmin_90_PA2)/(1 - EVF_CAA143_90_PA2   - DPF_CAA143_90_PA2  - LFF_CAA143_90_PA2  - OSF_CAA143_90_PA2 ))}
define DR_91_PA   {value min(CL_91_PA
                           + WR_91_PA,  (AWRann_91_PA *(1 - RUFR_91_PA  + RPF_91_PA ) + AWOann_91_PA *(1 - RUFO_91_PA  + RPF_91_PA ))*(1-GPmin_91_PA )/(1 - EVF_MDOTA_91_PA - DPF_MDOTA_91_PA - LFF_MDOTA_91_PA - OSF_MDOTA_91_PA))}

define DR_50_PUa  {value min(CL_50_PUa, UD_50_PUa_ann /(1 - EF_JJO_50_PU     - SF_JJO_50_PU    ))}
define DR_50_PUc  {value min(CL_50_PUc, UD_50_PUc_ann /(1 - EF_JJO_50_PU     - SF_JJO_50_PU    ))}
define DR_71_PU1  {value min(CL_71_PU1, UD_71_PU1_ann /(1 - EF_CAA012_71_PU1 - SF_CAA012_71_PU1))}
define DR_71_PU2  {value min(CL_71_PU2, UD_71_PU2_ann /(1 - EF_CAA066_71_PU2 - SF_CAA066_71_PU2))}
define DR_90_PUa  {value min(CL_90_PUa, UD_90_PUa_ann /(1 - EF_CAA143_90_PU  - SF_CAA143_90_PU ))}
define DR_90_PUb  {value min(CL_90_PUb, UD_90_PUb_ann /(1 - EF_CAA143_90_PU  - SF_CAA143_90_PU ))}

define DR_64_XA   {value min(CL_64_XA, (AWRann_64_XA *(1 - RUFR_64_XA  + RPF_64_XA ) + AWOann_64_XA  *(1 - RUFO_64_XA  + RPF_64_XA ))/(1 - EVF_MDOTA_64_XA   - DPF_MDOTA_64_XA   - LFF_MDOTA_64_XA   - OSF_MDOTA_64_XA  ))}
define DR_72_XA1  {value min(CL_72_XA1,(AWRann_72_XA1*(1 - RUFR_72_XA1 + RPF_72_XA1) + AWOann_72_XA1 *(1 - RUFO_72_XA1 + RPF_72_XA1))/(1 - EVF_ARY010_72_XA1 - DPF_ARY010_72_XA1 - LFF_ARY010_72_XA1 - OSF_ARY010_72_XA1))}
define DR_72_XA2  {value min(CL_72_XA2,(AWRann_72_XA2*(1 - RUFR_72_XA2 + RPF_72_XA2) + AWOann_72_XA2 *(1 - RUFO_72_XA2 + RPF_72_XA2))/(1 - EVF_XCC010_72_XA2 - DPF_XCC010_72_XA2 - LFF_XCC010_72_XA2 - OSF_XCC010_72_XA2))}
define DR_72_XA3  {value min(CL_72_XA3,(AWRann_72_XA3*(1 - RUFR_72_XA3 + RPF_72_XA3) + AWOann_72_XA3 *(1 - RUFO_72_XA3 + RPF_72_XA3))/(1 - EVF_XCC054_72_XA3 - DPF_XCC054_72_XA3 - LFF_XCC054_72_XA3 - OSF_XCC054_72_XA3))}
define DR_73_XA   {value min(CL_73_XA, (AWRann_73_XA *(1 - RUFR_73_XA  + RPF_73_XA ) + AWOann_73_XA  *(1 - RUFO_73_XA  + RPF_73_XA ))/(1 - EVF_MDOTA_73_XA   - DPF_MDOTA_73_XA   - LFF_MDOTA_73_XA   - OSF_MDOTA_73_XA  ))}

! Reclamation resposnible for losses
define DR_72_PR1  {value min(CL_72_PR1/(1-CLF_72_PR1),(AWRann_72_PR1*(1 - RUFR_72_PR1 + RPF_72_PR1) + AWOann_72_PR1*(1 - RUFO_72_PR1 + RPF_72_PR1) + AWWann_72_PR1*(1 - RUFW_72_PR1 + RPF_72_PR1))/(1 - EVF_VLW008_72_PR1  - DPF_VLW008_72_PR1 - LFF_VLW008_72_PR1 - OSF_VLW008_72_PR1))}
define DR_72_PR2  {value min(CL_72_PR2/(1-CLF_72_PR2),(AWRann_72_PR2*(1 - RUFR_72_PR2 + RPF_72_PR2) + AWOann_72_PR2*(1 - RUFO_72_PR2 + RPF_72_PR2) + AWWann_72_PR2*(1 - RUFW_72_PR2 + RPF_72_PR2))/(1 - EVF_XCC033_72_PR2  - DPF_XCC033_72_PR2 - LFF_XCC033_72_PR2 - OSF_XCC033_72_PR2))}
define DR_72_PR3  {value min(CL_72_PR3/(1-CLF_72_PR3),(AWRann_72_PR3*(1 - RUFR_72_PR3 + RPF_72_PR3) + AWOann_72_PR3*(1 - RUFO_72_PR3 + RPF_72_PR3) + AWWann_72_PR3*(1 - RUFW_72_PR3 + RPF_72_PR3))/(1 - EVF_ARY010_72_PR3  - DPF_ARY010_72_PR3 - LFF_ARY010_72_PR3 - OSF_ARY010_72_PR3))}
define DR_72_PR4  {value min(CL_72_PR4/(1-CLF_72_PR4),(AWRann_72_PR4*(1 - RUFR_72_PR4 + RPF_72_PR4) + AWOann_72_PR4*(1 - RUFO_72_PR4 + RPF_72_PR4) + AWWann_72_PR4*(1 - RUFW_72_PR4 + RPF_72_PR4))/(1 - EVF_XCC033_72_PR4  - DPF_XCC033_72_PR4 - LFF_XCC033_72_PR4 - OSF_XCC033_72_PR4))}
define DR_72_PR5  {value min(CL_72_PR5/(1-CLF_72_PR5),(AWRann_72_PR5*(1 - RUFR_72_PR5 + RPF_72_PR5) + AWOann_72_PR5*(1 - RUFO_72_PR5 + RPF_72_PR5) + AWWann_72_PR5*(1 - RUFW_72_PR5 + RPF_72_PR5))/(1 - EVF_XCC054_72_PR5  - DPF_XCC054_72_PR5 - LFF_XCC054_72_PR5 - OSF_XCC054_72_PR5))}
define DR_72_PR6  {value min(CL_72_PR6/(1-CLF_72_PR6),(AWRann_72_PR6*(1 - RUFR_72_PR6 + RPF_72_PR6) + AWOann_72_PR6*(1 - RUFO_72_PR6 + RPF_72_PR6) + AWWann_72_PR6*(1 - RUFW_72_PR6 + RPF_72_PR6))/(1 - EVF_ARY010_72_PR6  - DPF_ARY010_72_PR6 - LFF_ARY010_72_PR6 - OSF_ARY010_72_PR6))}
define DR_91_PR   {value min(CL_91_PR /(1-CLF_91_PR ),(AWRann_91_PR *(1 - RUFR_91_PR  + RPF_91_PR ) + AWOann_91_PR *(1 - RUFO_91_PR  + RPF_91_PR ) + AWWann_91_PR *(1 - RUFW_91_PR  + RPF_91_PR ))/(1 - EVF_MDOTA_91_PR    - DPF_MDOTA_91_PR   - LFF_MDOTA_91_PR   - OSF_MDOTA_91_PR  ))}
define DR_D_CAA239_CVPRF_PRF{value min(CL_D_CAA239_CVPRF_PRF, dem_D_CAA239_CVPRF_prf_ann) /(1 - 0.25)} ! Reclamation responsible for losses

define anncvpDR_pag_s {value DR_50_PA1 + DR_71_PA1 + DR_71_PA2 + DR_71_PA3 + DR_71_PA4a + DR_71_PA4b + DR_71_PA5 
                           + DR_71_PA6 + DR_71_PA8 + DR_72_PA  + DR_73_PA1 + DR_73_PA2 
                           + DR_73_PA3 + DR_90_PA1 + DR_90_PA2 + DR_91_PA  + CL_SCVWD_PA + CL_SBCWD_PA}

define anncvpDR_pmi_s {value DR_50_PUa + DR_50_PUc + DR_71_PU1 + DR_71_PU2  + DR_90_PUa + DR_90_PUb + CL_SCVWD_PU + CL_SBCWD_PU}
define anncvpDR_pex_s {value DR_64_XA + DR_72_XA1 + DR_72_XA2 + DR_72_XA3 + DR_73_XA }
define anncvpDR_prf_s {value DR_72_PR1 + DR_72_PR2 + DR_72_PR3 + DR_72_PR4 + DR_72_PR5 + DR_72_PR6 + DR_91_PR + DR_D_CAA239_CVPRF_PRF}


!******************************************************************************
! Total system
define anncvpDR_sys{   
       case octBgnWY {  ! special case for first wateryear, Sum Oct-Sep
            condition month == OCT .and. wateryear == bgnWY
            value min(anncvpDR_pag_n + anncvpDR_pmi_n + anncvpDR_psc_n + anncvpDR_prf_n + anncvpDR_wf_n,  anncvpCL_tot_n)
                + min(anncvpDR_pag_s + anncvpDR_pmi_s + anncvpDR_pex_s + anncvpDR_prf_s + anncvpCL_pls_s, anncvpCL_tot_s) }
       case March { ! March for wateryears BgnWY - year before EndWY
            condition month == MAR
            value min(anncvpDR_pag_n + anncvpDR_pmi_n + anncvpDR_psc_n + anncvpDR_prf_n + anncvpDR_wf_n,  anncvpCL_tot_n)
                + min(anncvpDR_pag_s + anncvpDR_pmi_s + anncvpDR_pex_s + anncvpDR_prf_s + anncvpCL_pls_s, anncvpCL_tot_s) }
       case Rest { 
            condition always
            value anncvpDR_sysdv(-1) } }

define anncvpDR_sysdv  {std kind 'ANNUAL-DIVR-REQMNT' units 'taf'}
goal set_annual_dr_sys {anncvpDR_sysdv = anncvpDR_sys}
 

