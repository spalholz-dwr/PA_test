!***************************************************************************************************************************************
!    Copyright (C) 2017, 2018 State of California, Department of Water Resources. This file is part of the CalSim 3.
!
!    The CalSim 3 is free software: !<license>
!
!    you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free
!    Software Foundation, either version 3 of the License, or(at your option) any later version.
!
!    CalSim 3 is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
!    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
!
!    You should have received a copy of the GNU General Public License along with CalSim 3.  If not, see <http://www.gnu.org/licenses>.
!****************************************************************************************************************************************

! Define estimate of storage releases - for now timeseries data from a previous run
!define MFPForecastRelease  {timeseries kind 'STORAGE-FORECAST' units 'TAF'}
!define UARPForecastRelease {timeseries kind 'STORAGE-FORECAST' units 'TAF'}
!define P184ForecastRelease {timeseries kind 'STORAGE-FORECAST' units 'TAF'}


! Define initial value of Folosm level 3
define OctMarRunoffEst {  !Oct-Mar Sac Valley runoff 
		value (sum(i=Oct-month,Mar-month,1) UNIMP_SRBB(i)+ UNIMP_OROV(i)+ UNIMP_FOLS(i)+ UNIMP_YUBA(i))
		}
define OctMarRunoffEst_dv {alias OctMarRunoffEst kind 'DEBUG' units 'TAF'}  

define S_FOLSMlevel3init {
    case OctthruMar {
        condition range(month,OCT,MAR) .and. OctMarRunoffEst/1000.0 > 14.33 !25% Exceedence level for Oct-Mar 40-30-30 Runoff !in MAF
        value 300.0 }
    case Other {
        condition always
        value 400.0 }
}
define S_FOLSMlevel3initdv {alias S_FOLSMlevel3init kind 'DEBUG' units 'TAF'}

!!!!!!!!!! Defining and forecasting diversions from Folsom Lake !!!!!!!!!!

! Compare water availability to demand
define FolDivMax1  {case div_by_zero {condition SumUD_26S_PU3_sv < .0001 value 1.} case otherwise  {condition always value min(1.,WRann_FOLSM_26S_PU3/SumUD_26S_PU3_sv)}} ! California Parks and Recreation
define FolDivMax2  {case div_by_zero {condition Sumud_ELDID_NU3_sv < .0001 value 1.} case otherwise  {condition always value min(1.,(WRann_FOLSM_WTPEDH + CLann_FOLSM_WTPEDH*perdel_cvpmi_sys)/Sumud_ELDID_NU3_sv)}}     ! El Dorado Irrigation District
define FolDivMax3  {case div_by_zero {condition sumUD_26S_NU4_sv < .0001 value 1.} case otherwise  {condition always value min(1.,WRann_FOLSM_26S_NU4/sumUD_26S_NU4_sv)}}                                              ! Aerojet
define FolDivMax4  {case div_by_zero {condition sumUD_26N_NU2_sv < .0001 value 1.} case otherwise  {condition always value min(1.,min(WRAnn_AMR017_WTPBJM,WFann_AMR017_WTPBJM)/sumUD_26N_NU2_sv)}}                     ! Carmichael Water District
define FolDivMax5  {case div_by_zero {condition SumUD_26S_PU1_sv < .0001 value 1.} case otherwise  {condition always value min(1.,min(WRann_FOLSM_WTPFOL + CLann_FOLSM_WTPFOL*perdel_cvpmi_sys, WFann_FOLSM_WTPFOL)/SumUD_26S_PU1_sv)}}    ! City of Folsom, Folsom Prison
define FolDivMax6  {case div_by_zero {condition SumUD_26S_PU2_sv < .0001 value 1.} case otherwise  {condition always value min(1., WRann_WTPCOL_26S_PU2/SumUD_26S_PU2_sv)}}                                             ! Golden State Water Company
define FolDivMax7  {case div_by_zero {condition SumUD_24_NU2_sv < .0001 value 1.} case otherwise  {condition always value min(1.,WFann_NFA016_ABT002/SumUD_24_NU2_sv)}}                                               ! Placer County Water Agency
define FolDivMax8  {case div_by_zero {condition SumUD_26N_PU1_sv < .0001 value 1.} case otherwise  {condition always value min(1.,min(WFann_FOLSM_WTPRSV,MFPann_FOLSM_WTPRSV + CLann_FOLSM_WTPRSV*perdel_cvpmi_sys)/SumUD_26N_PU1_sv)}} ! City of Roseville
define FolDivMax9  {case div_by_zero {condition SumUD_60N_PU_sv < .0001 value 1.} case otherwise  {condition always value min(1.,min(WFann_FSC025_60N_PU, WRann_FSC025_60N_PU + CLann_FSC025_60N_PU*perdel_cvpmi_sys)/SumUD_60N_PU_sv)}}    ! Sacramento Municipal Utility District
define FolDivMax10 {case div_by_zero {condition SumUD_26N_NU1_sv < .0001 value 1.} case otherwise {condition always value min(1.,MFPSSann_FOLSM_WTPSJP/SumUD_26N_NU1_sv)}}            ! Sacramento Suburban Water District
define FolDivMax11 {case div_by_zero {condition (SumUD_26N_PU2_sv + SumUD_26N_PU3_sv) < .0001 value 1.} case otherwise {condition always value min(1.,min(MFPSJann_FOLSM_WTPSJP + WRann_FOLSM_WTPSJP + CLann_FOLSM_WTPSJP*perdel_cvpmi_sys, WFann_FOLSM_WTPSJP_SJ)/(SumUD_26N_PU2_sv + SumUD_26N_PU3_sv))}} ! San Juan Water District

! Total monthly diversions from Folsom and Natomas
define FolDivEst1  {value UD_26S_PU3*cfs_taf*FolDivMax1}
define FolDivEst2  {value UD_ELDID_NU3*cfs_taf*FolDivMax2}
define FolDivEst3  {value UD_26S_NU4*cfs_taf*FolDivMax3}
define FolDivEst4  {value UD_26N_NU2*cfs_taf*FolDivMax4}
define FolDivEst5  {value UD_26S_PU1*cfs_taf*FolDivMax5}
define FolDivEst6  {value UD_26S_PU2*cfs_taf*FolDivMax6}
define FolDivEst7  {value UD_24_NU2*cfs_taf *FolDivMax7}
define FolDivEst8  {value UD_26N_PU1*cfs_taf*FolDivMax8}
define FolDivEst9  {value UD_60N_PU *cfs_taf*FolDivMax9}
define FolDivEst10 {value UD_26N_NU1*cfs_taf*FolDivMax10}
define FolDivEst11 {value (UD_26N_PU2+UD_26N_PU3)*cfs_taf*FolDivMax11}

! Remaining estimated Folsom diversions through September
define FolDivEst {value FolDivEst1                               
                         + FolDivEst2                               
                         + FolDivEst3                               
                         + FolDivEst4                               
                         + FolDivEst5                               
                         + FolDivEst6                               
                         + FolDivEst7                               
                         + FolDivEst8                               
                         + FolDivEst9                               
                         + FolDivEst10                              
                         + FolDivEst11}    

define FolDivEstSum1  {sum(i=0,SEP-month,1) UD_26S_PU3(i)*cfs_taf(i)*FolDivMax1}
define FolDivEstSum2  {sum(i=0,SEP-month,1) UD_ELDID_NU3(i)*cfs_taf(i)*FolDivMax2}
define FolDivEstSum3  {sum(i=0,SEP-month,1) UD_26S_NU4(i)*cfs_taf(i)*FolDivMax3}
define FolDivEstSum4  {sum(i=0,SEP-month,1) UD_26N_NU2(i)*cfs_taf(i)*FolDivMax4}
define FolDivEstSum5  {sum(i=0,SEP-month,1) UD_26S_PU1(i)*cfs_taf(i)*FolDivMax5}
define FolDivEstSum6  {sum(i=0,SEP-month,1) UD_26S_PU2(i)*cfs_taf(i)*FolDivMax6}
define FolDivEstSum7  {sum(i=0,SEP-month,1) UD_24_NU2(i)*cfs_taf(i) *FolDivMax7}
define FolDivEstSum8  {sum(i=0,SEP-month,1) UD_26N_PU1(i)*cfs_taf(i)*FolDivMax8}
define FolDivEstSum9  {sum(i=0,SEP-month,1) UD_60N_PU(i) *cfs_taf(i)*FolDivMax9}
define FolDivEstSum10 {sum(i=0,SEP-month,1) UD_26N_NU1(i)*cfs_taf(i)*FolDivMax10}
define FolDivEstSum11 {Sum(i=0,SEP-month,1) (UD_26N_PU2(i)+UD_26N_PU3(i))*cfs_taf(i)*FolDivMax11}

! Remaining estimated Folsom diversions through September
define FolDivEstSum {value FolDivEstSum1                               
                         + FolDivEstSum2                               
                         + FolDivEstSum3                               
                         + FolDivEstSum4                               
                         + FolDivEstSum5                               
                         + FolDivEstSum6                               
                         + FolDivEstSum7                               
                         + FolDivEstSum8                               
                         + FolDivEstSum9                               
                         + FolDivEstSum10                              
                         + FolDivEstSum11}    
														
define FolDivEstSumUARM_dv {alias FolDivEstSum kind 'DIVERSION-FORECAST' units 'TAF'}

!!!!!!!!!! Defining Folsom operating rules and targets !!!!!!!!!!

define FolSupEst   {value max(0.0,FolsomInflowEstSum - FolDivEstSum + S_FOLSM(-1) - S_FOLSMlevel3init)}
define FolSupEstdv {alias FolSupEst kind 'FORECAST' units 'TAF'}

!define FolFlowTarg {value min((FolSupEst/cfs_taf)/(Sep-month+1.),5000.)}
define FolFlowTarg   {value (FolSupEst/cfs_taf)/(Sep-month+1.) }
define FolFlowTargdv {alias FolFlowTarg kind 'FORECAST' units 'TAF'}

define FolRuleCalc {
     case JunthruSep {
          condition month >= may .and. month <= sep
          value     FolsomInflowEst - FolDivEst + S_FOLSM(-1) - FolFlowTarg*cfs_taf }
     case Other {
          condition always
          value     S_FOLSMlevel3init}}
          
define FolRuleCalcdv {alias FolRuleCalc kind 'RULE' units 'TAF'}


!define S_FOLSMlevel4    {case NovMar {condition range(month,nov,mar) value S_FOLSMlevel5} 
!                         case April  {condition month == APR value S_FOLSMlevel6 - 175.6} !792.} Changed since 792 puts this above level 5, now same as level 5 
!                         case MMay   {condition month == MAY value S_FOLSMlevel6}  !967}  Changed since 967 puts this above level 5, now same as level 5 
!                         case otherwise   {condition always value 592.}}
!                         
!define S_FOLSMlevel4dv {alias S_FOLSMlevel4 kind 'STORAGE-LEVEL' units 'TAF'}

define S_FOLSMlevel3adj   {value min(max(FolRuleCalc,S_FOLSMlevel2),S_FOLSMlevel4)}
define S_FOLSMlevel3adjdv {alias S_FOLSMlevel3adj kind 'STORAGE-LEVEL' units 'TAF'}

goal S_FOLSMZone3 {S_FOLSM_3 < max(S_FOLSMlevel3adj - S_FOLSMlevel2,0.)}
goal S_FOLSMZone4 {S_FOLSM_4 < max(S_FOLSMlevel4 - S_FOLSMlevel3adj,0.)}
goal S_FOLSMZone5 {S_FOLSM_5 < max(S_FOLSMlevel5 - S_FOLSMlevel4,0.)}
goal S_FOLSMZone6 {S_FOLSM_6 < max(S_FOLSMlevel6 - S_FOLSMlevel5,0.)}
