/*

ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - Middle River (MR)


Output only

*/

!****************************************************************************************

! calculate previous month's value of salinity
define MR_EC_Month_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(monthly_ave),(month-1),wateryear)}
}

define MR_EC_Month {std kind 'SALINITY' units 'UMHOS/CM'}
goal setMR_EC_MON {MR_EC_Month = MR_EC_Month_sv}

!get ANN_EC for 2 month earlier 4/14/2005
define MR_EC_Month_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(monthly_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(monthly_ave),(month-2),wateryear)}
}

define MR_EC_MonthDSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setMR_EC_DSM2 {MR_EC_MonthDSM2 = MR_EC_Month_smooth_sv}

! calculate the maximum 14 day running average
define MR_EC_Max14Day_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(max_14day_running_ave),(month-1),wateryear)}
}
define MR_EC_Max14Day {std kind 'SALINITY' units 'UMHOS/CM'}
goal setMR_EC_14Ave {MR_EC_Max14Day = MR_EC_Max14Day_sv}

!get ANN_EC for 2 month earlier
define MR_EC_Max14day_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(max_14day_running_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(MR),int(max_14day_running_ave),(month-2),wateryear)}
}

define MR_EC_Max14_DSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setMR_EC_DSM2_2 {MR_EC_Max14_DSM2 = MR_EC_Max14day_smooth_sv}

