! R.Wilbur & S. Wu 5/10/05
/*

ARTIFICIAL NEURAL NETWORK IMPLEMENTATION - JERSEY POINT

Jersey Point salinity standard:
14-day running average EC may not exceed the standard for the periods listed below (mmhos):
water-year-type:    0.45 EC April 1 to:    Ec from date shown to Aug 15:
Wet                 Aug 15                 --
Above Normal        Aug 15                 --
Below Normal        Jun 20                 0.74
Dry                 Jun15                  1.35
Critical            --                     2.20

These standards are modified to account to the monthly time-step.
Modified values are derived from an exponential weighting function.
Modified values are in salinity_std_jpt_new.table.

*/

!****************************************************************************************

! calculate previous month's value of salinity
define JP_EC_Month_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(monthly_ave),(month-1),wateryear)}
}

define JP_EC_Month {std kind 'SALINITY' units 'UMHOS/CM'}
goal setJP_EC_MON {JP_EC_Month = JP_EC_Month_sv}

!get ANN_EC for 2 month earlier 4/14/2005
define JP_EC_Month_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(monthly_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(monthly_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(monthly_ave),(month-2),wateryear)}
}

define JP_EC_MonthDSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setJP_EC_DSM2 {JP_EC_MonthDSM2 = JP_EC_Month_smooth_sv}

! calculate the maximum 14 day running average
define JP_EC_Max14Day_sv {
  case lastWaterYear {
    condition  month == Oct
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC(C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
               C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-5),DXC(-4),DXC(-3),DXC(-2),DXC(-1),
               net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),
               sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),
               exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),
               SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),
               int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(max_14day_running_ave),(month-1),wateryear)}
}
define JP_EC_Max14Day {std kind 'SALINITY' units 'UMHOS/CM'}
goal setJP_EC_14Ave {JP_EC_Max14Day = JP_EC_Max14Day_sv}

!get ANN_EC for 2 month earlier
define JP_EC_Max14day_smooth_sv {
  case October {
    condition  month == Oct
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(max_14day_running_ave),11,(wateryear-1))}

  case November {
    condition  month == Nov
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(max_14day_running_ave),12,(wateryear-1))}

  case others {
    condition always
      value  AnnEC_matchDSM2(
             C_SAC041(-7),C_SAC041(-6), C_SAC041(-5),C_SAC041(-4),C_SAC041(-3),C_SAC041(-2),C_SAC041(-1),
               EXP_TD(-6),EXP_TD(-5),EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),
               C_SJR070(-7),C_SJR070(-6),C_SJR070(-5),C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),
               DXC(-6),DXC(-5),DXC(-4),DXC(-3),DXC(-2),
               net_DICU(-6),net_DICU(-5),net_DICU(-4),net_DICU(-3),net_DICU(-2),
               sac_oth(-6),sac_oth(-5),sac_oth(-4),sac_oth(-3),sac_oth(-2),
               exp_oth(-6),exp_oth(-5),exp_oth(-4),exp_oth(-3),exp_oth(-2),
               SMSCG_OP(-6),SMSCG_OP(-5),SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),
               int(daysindv(-7)),int(daysindv(-6)),int(daysindv(-5)),int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),
               int(JP),int(max_14day_running_ave),(month-2),wateryear)}
}

define JP_EC_Max14_DSM2 {std kind 'SALINITY' units 'UMHOS/CM'}
goal setJP_EC_DSM2_2 {JP_EC_Max14_DSM2 = JP_EC_Max14day_smooth_sv}

!****************************************************************************************

!define the EC standard for Jersey Point (millimhos/cm)  
define JP_EC_STD_lookup_orig {
  case Standard {
    condition  month >=Oct .and. month <=Jan .or. month >=APR .and. month <=Sep
    select  ECstandard
    from  salinity_std_jpt_new
    where  month=month,wyt_SAC=wyt_ann}
  case NoStandard {
    condition  always
    value  99.0} }
                                                           
define JP_EC_STD_lookup {                                     
  case tucp_adjust {
    condition tucp_trigger == 1
    value JP_EC_STD_lookup_orig*JP_wq_CritRelaxFac}     
  case Otherwise {
    condition  always
    value  JP_EC_STD_lookup_orig}                                                                              
}

define JP_EC_STD_sv {value JP_EC_STD_lookup*1000.0}
define JP_EC_STD {std kind 'SALINITY' units 'UMHOS/CM'}
goal JPECstandout {JP_EC_STD = JP_EC_STD_sv}

!****************************************************************************************
!get slope and intercept for constraint exp<=m*sac+b

define JP_b_sv {
  case control{
    condition month >=Oct .and. month <=Jan .or. month >= Apr .and. month <= Sep
    value  AnnLineGen(C_SAC041_ANN(-4),C_SAC041_ANN(-3),C_SAC041_ANN(-2),C_SAC041_ANN(-1),
                    EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
                    C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),SJR_ann_est,
                    DXC(-4),DXC(-3),DXC(-2),DXC(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2),sac_oth(-1),sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2),exp_oth(-1),exp_oth_est,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    JP_EC_STD_sv,line_JP_lo,line_JP_hi,
                    int(JP),int(intercept),int(ann_type),month,wateryear,4)}
  case other {
    condition  always
    value 999999.}
}
define JP_m_sv {
  case reducecalls {
    condition  JP_b_sv >= 999990.
    value 0.}
  case control{
    condition month >=Oct .and. month <=Jan .or. month >= Apr .and. month <= Sep
    value  AnnLineGen(C_SAC041_ANN(-4),C_SAC041_ANN(-3),C_SAC041_ANN(-2),C_SAC041_ANN(-1),
                    EXP_TD(-4),EXP_TD(-3),EXP_TD(-2),EXP_TD(-1),
                    C_SJR070(-4),C_SJR070(-3),C_SJR070(-2),C_SJR070(-1),SJR_ann_est,
                    DXC(-4),DXC(-3),DXC(-2),DXC(-1),DXC_est,
                    net_DICU(-4),net_DICU(-3),net_DICU(-2),net_DICU(-1),net_delta_cu,
                    sac_oth(-4),sac_oth(-3),sac_oth(-2), sac_oth(-1), sac_oth_est,
                    exp_oth(-4),exp_oth(-3),exp_oth(-2), exp_oth(-1), exp_oth_est,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),daysin,
                    JP_EC_STD_sv,line_JP_lo,line_JP_hi,
                    int(JP),int(slope),int(ann_type),month,wateryear,4)}
  case other {
    condition  always
    value 0.}
}
define JP_m {lower unbounded upper unbounded kind 'SLOPE' units 'NONE'}
define JP_b {lower unbounded upper unbounded kind 'INTERCEPT' units 'NONE'}
goal setJP_m {JP_m = JP_m_sv}
goal setJP_b {JP_b = JP_b_sv}

!****************************************************************************************
!Get the required Sac flow for ZERO exports
define JP_Sac_ZeroExp_sv1 {
  case NoSalinityControlPossible{
    condition abs(JP_m_sv) <= 0.001 .and. int(JP_b_sv) == 0
    value 0.}
  case NegSlope{
    condition JP_m_sv <= 0.0
    value 0.}
  case NegCarriage{
    condition JP_m_sv >= 1.0
    value 0.}
  case control{
    condition month >=Oct .and. month <=Jan .or. month >= Apr .and. month <= Sep
    value -JP_b_sv/JP_m_sv}
  case other {
    condition  always
    value 0.}
}
define JP_Sac_ZeroExp_sv2 {value max(0.0,JP_Sac_ZeroExp_sv1)}
define JP_Sac_ZeroExp {lower unbounded upper unbounded kind 'FLOW' units 'CFS'}
goal setJP_Sac_ZeroExp {JP_Sac_ZeroExp = JP_Sac_ZeroExp_sv2}
