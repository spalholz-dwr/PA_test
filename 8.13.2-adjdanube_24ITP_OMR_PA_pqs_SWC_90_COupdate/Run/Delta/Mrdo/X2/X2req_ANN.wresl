! THIS Code CONTAINS THE X2 STANDARD MODELING IN CALSIM
! X2 DAYS WITH FLOW-WEIGHTING PROCEDURE IS USED AS IN DWRSIM

! X2 is the 2ppt bottom isohaline line used to describe the entrapment zone.  ANN is used to compute the
! position as a function of last month's position and current month's Net Delta outflow

include[local] '..\..\Ann\AnnCommon3.wresl'

! ******************************************************************************************
! Set the begin and end day for the standard -- Roe always met first
define begday_roe {
     case StandardOn {
          condition      daysX2_roe_mod > 0.5
          value    1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_roe {
     case StandardOn {
          condition      daysX2_roe_mod > 0.5
          value    begday_roe + daysX2_roe_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_roedv {alias begday_roe kind 'debug' units 'none'}
define endday_roedv {alias endday_roe kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Roe standard
define DO_req_X2roe_init {
     case StandardOn {
          condition      daysX2_roe_mod > 0.5
          value getNDO_X2(km_roe,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    10,month,wateryear,int(begday_roe),int(endday_roe)) }
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2roe_nocap {
     case StandardOn {
          condition     daysX2_roe_mod > 0.5
          value         DO_req_X2roe_init}
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2roe {value min(flowcap_roe, DO_req_X2roe_nocap) }

! ******************************************************************************************
! Set the begin and end day for the standard -- Chipps always met second
define begday_chs {
     case StandardOn {
          condition      daysX2_chs_mod > 0.5
          value    endday_roe + 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_chs {
     case StandardOn {
          condition      daysX2_chs_mod > 0.5
          value    begday_chs + daysX2_chs_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_chsdv {alias begday_chs kind 'debug' units 'none'}
define endday_chsdv {alias endday_chs kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Chipps standard
define DO_req_X2chs_init {
     case StandardOn {
          condition      daysX2_chs_mod > 0.5
          value getNDO_x2_curMonNDOSplit(km_chs,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),DO_req_X2roe,NDO(-1),
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    int(endday_roe),0,10,month,wateryear,int(begday_chs),int(endday_chs))}
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2chs_nocap {
     case StandardOn {
          condition     daysX2_chs_mod > 0.5
          value         DO_req_X2chs_init}
     case StandardOff {
          condition      always
          value          0.0  }
}
define DO_req_X2chs {value min(flowcap_chs, DO_req_X2chs_nocap)}

! ******************************************************************************************
! Set the begin and end day for the standard -- Confluence always met last
define begday_bkg {
     case background {
          condition daysX2_bkg_mod > 0.5
          value    1. }
     case None {
          condition always
          value    0. }
}
define endday_bkg {
     case background {
          condition daysX2_bkg_mod > 0.5
          value    begday_bkg + daysX2_bkg_mod - 1. }
     case None {
          condition always
          value    0. }
}
define begday_cnf {
     case StandardNone {
          condition      daysX2_cnf < 0.5
          value    0. }
     case PA_SmeltAug {
          condition      daysX2_cnf > 0.5 .and. month == AUG
          value    endday_bkg + 1. }
     case StandardOn {
          condition      daysX2_cnf_mod > 0.5
          value    endday_chs + 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define endday_cnf {
     case StandardNone {
          condition      daysX2_cnf < 0.5
          value    0. }
     case StandardOn {
          condition      daysX2_cnf_mod > 0.5
          value   begday_cnf + daysX2_cnf_mod - 1. }
     case StandardOff {
          condition      always
          value    0. }
}
define begday_cnfdv {alias begday_cnf kind 'debug' units 'none'}
define endday_cnfdv {alias endday_cnf kind 'debug' units 'none'}

! Now compute the Delta outflow required to meet the Confluence standard

define DO_req_X2cnf_init {
     case WQCP {
          condition      daysX2_cnf_mod > 0.5 .and. month>=FEB .and. month<=JUN
          value getNDO_x2_curMonNDOSplit(km_cnf,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),DO_req_X2roe,DO_req_X2chs,
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    int(endday_roe),int(daysX2_chs_mod),10,month,wateryear,int(begday_cnf),int(endday_cnf))}
     case PA_SmeltAug {
          condition      daysX2_cnf_mod > 0.5 .and. month==AUG .and. wyt_Sac<=2
          value getNDO_x2(km_Aug,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    10,month,wateryear,int(begday_cnf),int(endday_cnf))}
     case PA_SmeltSept {
          condition      daysX2_cnf_mod > 0.5 .and. month==SEP .and. wyt_Sac<=2
          value getNDO_X2(km_PA,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    10,month,wateryear,int(begday_cnf),int(endday_cnf))}
     case PA_SmeltOct {
          condition      daysX2_cnf_mod > 0.5 .and. month==OCT .and. wyt_Sac<=2
          value getNDO_X2(km_PA,
                    SMSCG_OP(-4),SMSCG_OP(-3),SMSCG_OP(-2),SMSCG_OP(-1),SMSCG_OPSV,
                    NDO(-4),NDO(-3),NDO(-2),NDO(-1),
                    int(daysindv(-4)),int(daysindv(-3)),int(daysindv(-2)),int(daysindv(-1)),int(daysin),
                    10,month,wateryear,int(begday_cnf),int(endday_cnf))}
     case SpecFlowStd {
         condition       daysX2_cnf < 0.5
         value           flowmin_specX2 }
     case StandardOff {
         condition       always
         value           0.0  }   }
         
define DO_req_X2cnf_nocap {
     case StandardOn {
          condition     daysX2_cnf_mod > 0.5
          value         DO_req_X2cnf_init}
     case StandardOff {
          condition      always
          value          0.0  }
}		 
define DO_req_X2cnf {
     case PA_SmeltAugSep {
          condition month>=AUG .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case PA_SmeltOct {
          condition month==OCT .and. wyt_Sac<=2 
          value     DO_req_X2cnf_nocap}
     case WQCP {
          condition always
          value     min(flowcap_cnf, DO_req_X2cnf_nocap)}
}


