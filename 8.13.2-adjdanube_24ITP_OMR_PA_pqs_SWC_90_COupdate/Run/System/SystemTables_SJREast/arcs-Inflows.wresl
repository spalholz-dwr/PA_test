/*
CALSIM 3.0 SYSTEM FILE
ARCS-INFLOWS.WRESL

NAMING TAKES THE FOLLOWING FORMS:

I_{DESTINATION NODE}  - boundary inflow

Original formulation: C. Olson (MWH) April 2007
*/

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! BOUNDARY INFLOWS  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


!define  SR_60N        {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}

!define  SR_60N_MOK019 {std kind 'SURFACE-RUNOFF' units 'CFS'}
!define  SR_60N_MOK035 {std kind 'SURFACE-RUNOFF' units 'CFS'}
!define  SR_60N_SJR022 {std kind 'SURFACE-RUNOFF' units 'CFS'}
define  SR_60N_SJR028 {std kind 'SURFACE-RUNOFF' units 'CFS'}
define  SR_60N_SJR038 {std kind 'SURFACE-RUNOFF' units 'CFS'}

!********************** EAST SIDE ***********************************************
! Reservoir Inflows (alphabetically)
define I_ESTMN      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !EASTMAN RESERVOIR
define I_HNSLY      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !HENSLEY RESERVOIR
define I_MCLRE      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LAKE MCCLURE, EXCHEQUER DAM
!define I_LJC022     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !INFLOW TO FARMINGTON FLOOD CONTROL BASIN !defined in EastSideStreams/arcs-Inflows
!define I_MELON      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !NEW MELONES RESERVOIR, defined in Upper Stanislaus module
define I_MLRTN      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !MILLERTON RESERVOIR
!define I_NHGAN      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !NEW HOGAN RESERVOIR  !defined in EastSideStreams/arcs-Inflows
define I_PEDRO      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !NEW DON PEDRO RESERVOIR
define I_TULOC      {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !TULLOCH RESERVOIR

! Other Tributary Inflows (alphabetically)
define I_BCK040     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !BEAR CREEK
define I_BUR005     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !BURNS CREEK
!define I_CLV026     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LOCAL INFLOW TO CALAVERAS RIVER !defined in EastSideStreams/arcs-Inflows
define I_COT033     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !COTTONWOOD CREEK
define I_DBC024     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !BERENDA AND DRY CREEKS
define I_DCM027     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !DRY CREEK (Tributary to Merced River)
define I_DCT050     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !INFLOW FROM DRY CREEK TO TUO017
define I_DED044     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !DEADMAN'S CREEK
define I_FSL012     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !INFLOW TO FRESNO SLOUGH
define I_JBP006     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !INFLOW TO JAMES BYPASS
define I_MCD055     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LOCAL INFLOW TO MERCED RIVER (Exchequer Reservoir to Crocker-Huffman Dam)
define I_MPS038     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !MARIPOSA CREEK
define I_OWN040     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !OWENS CREEK
define I_FRS046     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LOCAL INFLOW BELOW HENSLEY
define I_SJR265     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !COTTONWOOD CREEK
define I_SJR258     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LITTLE DRY CREEK
define I_STS059     {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LOCAL INFLOW TO STANISLAUS RIVER


!!! Calaveras River
define I_NHGAN          {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !NEW HOGAN RESERVOIR
define I_CLV026         {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !LOCAL INFLOW TO CALAVERAS RIVER

!!! Littlejohns Creek
define I_LJC022         {timeseries kind 'INFLOW' units 'TAF' convert 'CFS'} !INFLOW TO FARMINGTON FLOOD CONTROL BASIN


define  SR_60S        {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}

define  SR_60S_FCS007 {std kind 'SURFACE-RUNOFF' units 'CFS'}
define  SR_60S_SJR028 {std kind 'SURFACE-RUNOFF' units 'CFS'}
define  SR_60S_SJR038 {std kind 'SURFACE-RUNOFF' units 'CFS'}
define  SR_60S_SJR043 {std kind 'SURFACE-RUNOFF' units 'CFS'}           




!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! SURFACE RUNOFF FROM WBAs  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

define SR_61          {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}
define SR_62          {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}
define SR_63          {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}
define SR_64          {timeseries kind 'SURFACE-RUNOFF' units 'TAF' convert 'CFS'}

define SR_61_SJR075 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_SJR070 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_SJR053 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_SJR043 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_TUO017 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_STS017 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_61_FCS007 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
                
define SR_62_MCD050 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_62_MCD021 {std kind 'SURFACE-RUNOFF' units 'CFS'}    
define SR_62_SJR081 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_62_TUO017 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
                
define SR_63_EBP050 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_EBP032 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_EBP030 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_MCD050 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_MCD021 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_SJR134 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_63_SJR117 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
!define SR_60N_SJR028 {std kind 'SURFACE-RUNOFF' units 'CFS'}                                                  
                
define SR_64_SJR227 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_SJR214 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_SJR180 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_EBP050 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_EBP032 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_EBP030 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_EBP019 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_EBP005 {std kind 'SURFACE-RUNOFF' units 'CFS'}            
define SR_64_FRS022 {std kind 'SURFACE-RUNOFF' units 'CFS'}  

     
     
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! CLOSURE TERMS  !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

define CT_MELON_SV     {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_PEDRO_SV     {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_Vernalis_SV  {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_Stevinson_SV {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_GRAVELLYFORD_SV {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_MODESTO_SV     {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_MERCED_SV  {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}
define CT_Ripon_SV {timeseries kind 'CLOSURE-TERM' units 'TAF' convert 'cfs'}

define CT_Melon      {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}  
define CT_Pedro      {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_Vernalis   {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_Stevinson  {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_GRAVELLYFORD  {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_MODESTO    {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_MERCED     {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}
define CT_Ripon     {lower unbounded upper unbounded kind 'CLOSURE-TERM' units 'CFS'}


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Constraints for setting CT_ dvars
! setNegativeCT_ constraints are used to set a lower bound for the CT_ decision variables to the negative _SV value. This 
! A penalty is imposed when CT_ decision variable is greater than the negative CT_ timeseries value. The penalty used in high for Pedro and Gravelly ford 
! since these closure terms are applied at the reservoir release or at the point of compliance and negative values of the closure term should result in reservoir
! releases. Lower penalty values are used for other closure terms where reservoir releases are not intended to meet the negative closure term values. Positive
! closure term values are set directly equal to the decision variables. Additional constraints to keep CT_ decision variables negative when CT_ timeseries values 
! are negative are also imposed. 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
goal setNegativeCT_Melon {
    lhs CT_Melon
    case negative {
        condition CT_Melon_SV < 0
            rhs CT_Melon_SV
                lhs>rhs penalty 88888
                lhs<rhs constrain
    }
}

goal setPostiveCT_Melon {
    lhs CT_Melon
    case postive {
        condition CT_Melon_SV >= 0
            rhs CT_Melon_SV
    }
}

goal setNegativeCT_Pedro {
    lhs CT_Pedro
    case negative {
        condition CT_Pedro_SV < 0
            rhs CT_Pedro_SV
                lhs>rhs penalty 88888
                lhs<rhs constrain
    }
}

goal setPostiveCT_Pedro {
    lhs CT_Pedro
    case postive {
        condition CT_Pedro_SV >= 0
            rhs CT_Pedro_SV
    }
}
 
goal setNegativeCT_GRAVELLYFORD {
    lhs CT_GRAVELLYFORD
    case negative {
        condition CT_GRAVELLYFORD_SV < 0
            rhs CT_GRAVELLYFORD_SV
                lhs>rhs penalty 88888
                lhs<rhs constrain
    }
}

goal setPostiveCT_GRAVELLYFORD {
    lhs CT_GRAVELLYFORD
    case postive {
        condition CT_GRAVELLYFORD_SV >= 0
            rhs CT_GRAVELLYFORD_SV
    }
} 


goal setNegativeCT_Vernalis {
    lhs CT_Vernalis
    case negative {
        condition CT_Vernalis_SV < 0
            rhs CT_Vernalis_SV
                lhs>rhs penalty 2
                lhs<rhs constrain
    }
}
goal setNonpositiveCT_Vernalis {
    lhs CT_Vernalis
    case negative {
        condition CT_Vernalis_SV < 0
            rhs 0
                lhs>rhs constrain
                lhs<rhs  penalty 0
    }
}
goal setPostiveCT_Vernalis {
    lhs CT_Vernalis
    case postive {
        condition CT_Vernalis_SV >= 0
            rhs CT_Vernalis_SV
    }
}

goal setNegativeCT_Stevinson {
    lhs CT_Stevinson
    case negative {
        condition CT_Stevinson_SV < 0
            rhs CT_Stevinson_SV
                lhs>rhs penalty 5
                lhs<rhs constrain
    }
}
goal setNonpositiveCT_Stevinson {
    lhs CT_Stevinson
    case negative {
        condition CT_Stevinson_SV < 0
            rhs 0
                lhs>rhs constrain
                lhs<rhs  penalty 0
    }
}
goal setPostiveCT_Stevinson {
    lhs CT_Stevinson
    case postive {
        condition CT_Stevinson_SV >= 0
            rhs CT_Stevinson_SV
    }
}

goal setNegativeCT_MODESTO {
    lhs CT_MODESTO
    case negative {
        condition CT_MODESTO_SV < 0
            rhs CT_MODESTO_SV
                lhs>rhs penalty 5
                lhs<rhs constrain
    }
}
goal setNonpositiveCT_MODESTO {
    lhs CT_MODESTO
    case negative {
        condition CT_MODESTO_SV < 0
            rhs 0
                lhs>rhs constrain
                lhs<rhs  penalty 0
    }
}
goal setPostiveCT_MODESTO {
    lhs CT_MODESTO
    case postive {
        condition CT_MODESTO_SV >= 0
            rhs CT_MODESTO_SV
    }
}
goal setNegativeCT_MERCED {
    lhs CT_MERCED
    case negative {
        condition CT_MERCED_SV < 0
            rhs CT_MERCED_SV
                lhs>rhs penalty 5
                lhs<rhs constrain
    }
}
goal setNonpositiveCT_MERCED {
    lhs CT_MERCED
    case negative {
        condition CT_MERCED_SV < 0
            rhs 0
                lhs>rhs constrain
                lhs<rhs  penalty 0
    }
}
goal setPostiveCT_MERCED {
    lhs CT_MERCED
    case postive {
        condition CT_MERCED_SV >= 0
            rhs CT_MERCED_SV
    }
}
goal setNegativeCT_Ripon {
    lhs CT_Ripon
    case negative {
        condition CT_Ripon_SV < 0
            rhs CT_Ripon_SV
                lhs>rhs penalty 5
                lhs<rhs constrain
    }
}
goal setNonpositiveCT_Ripon {
    lhs CT_Ripon
    case negative {
        condition CT_Ripon_SV < 0
            rhs 0
                lhs>rhs constrain
                lhs<rhs  penalty 0
    }
}
goal setPostiveCT_Ripon {
    lhs CT_Ripon
    case postive {
        condition CT_Ripon_SV >= 0
            rhs CT_Ripon_SV
    }
}