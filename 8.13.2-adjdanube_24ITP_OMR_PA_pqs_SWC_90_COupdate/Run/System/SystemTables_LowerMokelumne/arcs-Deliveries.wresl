/*
CALSIM 3.0 SYSTEM FILE
ARCS-DELIVERIES.WRESL


NAMING TAKES THE FOLLOWING FORMS:
AW_{Demand Unit}    - Total Applied Water
AWo_{Demand Unit}   - Applied Water for other crops
AWr_{Demand Unit}   - Applied Water for rice
DG_{Demand Unit}    - Total (Gross) Surface diversion
DN_{Demand Unit}    - Net Surface Delivery, reduced by conveyance losses
GP_{Demand Unit}    - Total Groundwater Pumping
GPmax_{Demand Unit} - Minimum Groundwater Pumping fraction
GPmin_{Demand Unit} - Minimum Groundwater Pumping fraction
RP_{Demand Unit}    - Miscellanoeus riparian ET
RU_{Demand Unit}    - Reuse of agricultural tailwater
TW_{Demand Unit}    - Agricultural tailwater
UD_{Demand Unit}    - Urban demand
*/
! no surface deliveries to 26S_NA
define    AW_26S_NA {std kind 'APPLIED-WATER' units 'CFS'} ! Total Applied Water
define    RU_26S_NA {std kind 'REUSE' units 'CFS'}
define    RP_26S_NA {std kind 'RIPARIAN-MISC-ET' units 'CFS'}
define    AWR_26S_NA     {timeseries kind 'APPLIED-WATER' units 'TAF' convert 'CFS'}! Applied Water for rice
define    AWO_26S_NA     {timeseries kind 'APPLIED-WATER' units 'TAF' convert 'CFS'}! Applied Water for all other crops

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!! WBA 60N     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! Jackson Valley ID
define  DN_60N_NA1      {std kind 'SW_DELIVERY-NET'       units 'CFS'}            
define  DG_60N_NA1      {std kind 'SW_DELIVERY-GROSS'     units 'CFS'}
define  RU_60N_NA1      {std kind 'REUSE'                 units 'CFS'}
define  RP_60N_NA1      {std kind 'RIPARIAN-MISC-ET'      units 'CFS'}  
define  TW_60N_NA1      {timeseries kind 'TAILWATER'      units 'TAF' convert 'CFS'}
define  AW_60N_NA1      {std kind 'APPLIED-WATER'         units 'CFS'}         
define  AWO_60N_NA1     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}
define  AWR_60N_NA1     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}

! Omochumne-Hartnell WD, Galt ID, Clay WD
define  DN_60N_NA2      {std kind 'SW_DELIVERY-NET'       units 'CFS'}            
define  DG_60N_NA2      {std kind 'SW_DELIVERY-GROSS'     units 'CFS'}
define  RU_60N_NA2      {std kind 'REUSE'                 units 'CFS'}
define  RP_60N_NA2      {std kind 'RIPARIAN-MISC-ET'      units 'CFS'}  
define  TW_60N_NA2      {timeseries kind 'TAILWATER'      units 'TAF' convert 'CFS'}
define  AW_60N_NA2      {std kind 'APPLIED-WATER'         units 'CFS'}         
define  AWO_60N_NA2     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}
define  AWR_60N_NA2     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}

! North San Joaquin WCD
define  DN_60N_NA3      {std kind 'SW_DELIVERY-NET'       units 'CFS'}            
define  DG_60N_NA3      {std kind 'SW_DELIVERY-GROSS'     units 'CFS'}
define  RU_60N_NA3      {std kind 'REUSE'                 units 'CFS'}
define  RP_60N_NA3      {std kind 'RIPARIAN-MISC-ET'      units 'CFS'}  
define  TW_60N_NA3      {timeseries kind 'TAILWATER'      units 'TAF' convert 'CFS'}
define  AW_60N_NA3      {std kind 'APPLIED-WATER'         units 'CFS'}         
define  AWO_60N_NA3     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}
define  AWR_60N_NA3     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}

! Woodbridge ID
define  DN_60N_NA4      {std kind 'SW_DELIVERY-NET'       units 'CFS'}            
define  DG_60N_NA4      {std kind 'SW_DELIVERY-GROSS'     units 'CFS'}
define  RU_60N_NA4      {std kind 'REUSE'                 units 'CFS'}
define  RP_60N_NA4      {std kind 'RIPARIAN-MISC-ET'      units 'CFS'}  
define  TW_60N_NA4      {timeseries kind 'TAILWATER'      units 'TAF' convert 'CFS'}
define  AW_60N_NA4      {std kind 'APPLIED-WATER'         units 'CFS'}         
define  AWO_60N_NA4     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}
define  AWR_60N_NA4     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}

! Mokelumne River riparian diversions Camanche Dam to Interstate 5
define  DN_60N_NA5      {std kind 'SW_DELIVERY-NET'       units 'CFS'}            
define  DG_60N_NA5      {std kind 'SW_DELIVERY-GROSS'     units 'CFS'}
define  RU_60N_NA5      {std kind 'REUSE'                 units 'CFS'}
define  RP_60N_NA5      {std kind 'RIPARIAN-MISC-ET'      units 'CFS'}  
define  TW_60N_NA5      {timeseries kind 'TAILWATER'      units 'TAF' convert 'CFS'}
define  AW_60N_NA5      {std kind 'APPLIED-WATER'         units 'CFS'}         
define  AWO_60N_NA5     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}
define  AWR_60N_NA5     {timeseries kind 'APPLIED-WATER'  units 'TAF' convert 'CFS'}

! 60N_NU1 City of Galt, Lodi, and small communities
define  DN_60N_NU1      {std kind 'SW_DELIVERY-NET' units 'CFS'}            
define  DG_60N_NU1      {std kind 'SW_DELIVERY-GROSS' units 'CFS'}
define  UD_60N_NU1      {timeseries kind 'URBAN-DEMAND' units 'TAF' convert 'CFS'}

! Rancho Murieta
define  DN_60N_NU2      {std kind 'SW_DELIVERY-NET' units 'CFS'}            
define  DG_60N_NU2      {std kind 'SW_DELIVERY-GROSS' units 'CFS'}
define  UD_60N_NU2      {timeseries kind 'URBAN-DEMAND' units 'TAF' convert 'CFS'}

! SMUD - Rancho Seco Power Plant
define  DN_60N_PU       {std kind 'SW_DELIVERY-NET' units 'CFS'}            
define  DG_60N_PU       {std kind 'SW_DELIVERY-GROSS' units 'CFS'}
define  UD_60N_PU       {timeseries kind 'URBAN-DEMAND' units 'TAF' convert 'CFS'}

! East Bay MUD
define  DN_EBMUD        {std kind 'SW_DELIVERY-NET' units 'CFS'}            
define  DG_EBMUD        {std kind 'SW_DELIVERY-GROSS' units 'CFS'}

define AnnualEBMUD      {
    case LOD2020 {condition LODFlag <= 0.5 value  181.} !mgd. e-mail from Ben Bray, 02/10/23
    case LOD2040 {condition LODFlag >  0.5 value  201.}}
    

!define distEBMUD        {select EBMUD from Mok_demands where month=month}
define distEBMUD        {! FRom Ben Bray, EBMUD
    case mOct  {condition month == OCT value 1.10}
    case mNov  {condition month == NOV value 0.90}
    case mDec  {condition month == DEC value 0.65}
    case mJan  {condition month == JAN value 0.60}
    case mFeb  {condition month == FEB value 0.65}
    case mMar  {condition month == MAR value 0.75}
    case mApr  {condition month == APR value 0.90}
    case mMay  {condition month == MAY value 1.15}
    case mJun  {condition month == JUN value 1.30}
    case mJul  {condition month == JUL value 1.35}
    case mAug  {condition month == AUG value 1.35}
    case mSep  {condition always       value 1.30}}
    
define UD_EBMUD         {value AnnualEBMUD * 3.068888 * distEBMUD * daysin/1000. * taf_cfs}





