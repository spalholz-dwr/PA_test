! VA_flow_calcs.wresl

!*********************************************************************************************
! Calculate disposition of SJR flows from Millerton Flood Release and Restoration Release
! As part of this track Millerton flood releases, other (main) releases, and flow from other sources that leave each node.  
! Below Mendota Pool tracking switches from main releases to SJRR flows
! Method is to have a priority order of depletions, i.e. depletions come from other flow first, other (main) releases next, and flood releases next, for example
! Accretions that did not come Millerton always get added onto the otherflow component

!************* Node 265
! Connectivity *** goal continuitySJR265       {C_MLRTN + I_SJR265 - C_SJR265            = 0.}  
!Net change to distribute
define SJR265_netchg {value I_SJR265} !Net inflow/diversion/accretion/depletion other than river inflow
define Mlrtn_fldrel_Mlrtn {value C_MLRTNA[WHEELJPOD] + C_MLRTNF[WHEELJPOD]}
define Mlrtn_mainrel_Mlrtn {value C_MLRTNM[WHEELJPOD] }
define Otherflow_Mlrtn {value 0.}
define SJR265_otherflow {
        case depletion {
        condition SJR265_netchg < 0.
        value max(0., Otherflow_Mlrtn + SJR265_netchg)}
    case otherwise {
        condition always
        value Otherflow_Mlrtn + SJR265_netchg}
}
define SJR265_unmet1 {value min(0.,SJR265_netchg + Otherflow_Mlrtn)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR265_Mlrtn_fldrel {
        case depletion {
        condition SJR265_netchg < 0.
        value max(0., Mlrtn_fldrel_Mlrtn + SJR265_unmet1)}
    case otherwise {
        condition always
        value Mlrtn_fldrel_Mlrtn}
}
define SJR265_unmet2 {value min(0.,SJR265_unmet1 + Mlrtn_fldrel_Mlrtn)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR265_Mlrtn_mainrel {
    case depletion {
        condition SJR265_netchg < 0.
        value max(0.,Mlrtn_mainrel_Mlrtn + SJR265_unmet2)}
    case otherwise {
        condition always
        value Mlrtn_mainrel_Mlrtn}
}
define SJR265_otherflow_dv {alias SJR265_otherflow kind 'alias' units 'cfs'}
define SJR265_Mlrtn_mainrel_dv {alias SJR265_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR265_Mlrtn_fldrel_dv {alias SJR265_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR265_netchg_dv {alias SJR265_netchg kind 'alias' units 'cfs'}

!************* Node 263
! Connectivity *** goal continuitySJR263       {C_SJR265 + SG54_SJR263_7 - C_SJR263     = 0.} 
!Net change to distribute
define SJR263_netchg {value SG54_SJR263_7[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR263_otherflow {
        case depletion {
        condition SJR263_netchg < 0.
        value max(0., SJR265_otherflow + SJR263_netchg)}
    case otherwise {
        condition always
        value SJR265_otherflow + SJR263_netchg}
}
define SJR263_unmet1 {value min(0.,SJR263_netchg + SJR265_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR263_Mlrtn_fldrel {
        case depletion {
        condition SJR263_netchg < 0.
        value max(0., SJR265_Mlrtn_fldrel + SJR263_unmet1)}
    case otherwise {
        condition always
        value SJR265_Mlrtn_fldrel}
}
define SJR263_unmet2 {value min(0.,SJR263_unmet1 + SJR265_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR263_Mlrtn_mainrel {
    case depletion {
        condition SJR263_netchg < 0.
        value max(0.,SJR265_Mlrtn_mainrel + SJR263_unmet2)}
    case otherwise {
        condition always
        value SJR265_Mlrtn_mainrel}
}
define SJR263_otherflow_dv {alias SJR263_otherflow kind 'alias' units 'cfs'}
define SJR263_Mlrtn_mainrel_dv {alias SJR263_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR263_Mlrtn_fldrel_dv {alias SJR263_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR263_netchg_dv {alias SJR263_netchg kind 'alias' units 'cfs'}

!************* Node 258
! Connectivity ***  goal continuitySJR258       {C_SJR263 + I_SJR258 - C_SJR258        = 0.}   
define SJR258_netchg {value I_SJR258} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR258_otherflow {
        case depletion {
        condition SJR258_netchg < 0.
        value max(0., SJR263_otherflow + SJR258_netchg)}
    case otherwise {
        condition always
        value SJR263_otherflow + SJR258_netchg}
}
define SJR258_unmet1 {value min(0.,SJR258_netchg + SJR263_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR258_Mlrtn_fldrel {
        case depletion {
        condition SJR258_netchg < 0.
        value max(0., SJR263_Mlrtn_fldrel + SJR258_unmet1)}
    case otherwise {
        condition always
        value SJR263_Mlrtn_fldrel}
}
define SJR258_unmet2 {value min(0.,SJR258_unmet1 + SJR263_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR258_Mlrtn_mainrel {
    case depletion {
        condition SJR258_netchg < 0.
        value max(0.,SJR263_Mlrtn_mainrel + SJR258_unmet2)}
    case otherwise {
        condition always
        value SJR263_Mlrtn_mainrel}
}
define SJR258_otherflow_dv {alias SJR258_otherflow kind 'alias' units 'cfs'}
define SJR258_Mlrtn_mainrel_dv {alias SJR258_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR258_Mlrtn_fldrel_dv {alias SJR258_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR258_netchg_dv {alias SJR258_netchg kind 'alias' units 'cfs'}

!************* Node 256
! Connectivity *** goal continuitySJR256       {C_SJR258  + SG55_SJR256_7 - C_SJR256    = 0.} 
define SJR256_netchg {value SG55_SJR256_7[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR256_otherflow {
        case depletion {
        condition SJR256_netchg < 0.
        value max(0., SJR258_otherflow + SJR256_netchg)}
    case otherwise {
        condition always
        value SJR258_otherflow + SJR256_netchg}
}
define SJR256_unmet1 {value min(0.,SJR256_netchg + SJR258_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR256_Mlrtn_fldrel {
        case depletion {
        condition SJR256_netchg < 0.
        value max(0., SJR258_Mlrtn_fldrel + SJR256_unmet1)}
    case otherwise {
        condition always
        value SJR258_Mlrtn_fldrel}
}
define SJR256_unmet2 {value min(0.,SJR256_unmet1 + SJR258_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR256_Mlrtn_mainrel {
    case depletion {
        condition SJR256_netchg < 0.
        value max(0.,SJR258_Mlrtn_mainrel + SJR256_unmet2)}
    case otherwise {
        condition always
        value SJR258_Mlrtn_mainrel}
}
define SJR256_otherflow_dv {alias SJR256_otherflow kind 'alias' units 'cfs'}
define SJR256_Mlrtn_mainrel_dv {alias SJR256_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR256_Mlrtn_fldrel_dv {alias SJR256_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR256_netchg_dv {alias SJR256_netchg kind 'alias' units 'cfs'}

!************* Node 249
! Connectivity *** goal continuitySJR249       {C_SJR256  + SG56_SJR249_7 - C_SJR249    = 0.} 
define SJR249_netchg {value SG56_SJR249_7[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR249_otherflow {
        case depletion {
        condition SJR249_netchg < 0.
        value max(0., SJR256_otherflow + SJR249_netchg)}
    case otherwise {
        condition always
        value SJR256_otherflow + SJR249_netchg}
}
define SJR249_unmet1 {value min(0.,SJR249_netchg + SJR256_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR249_Mlrtn_fldrel {
        case depletion {
        condition SJR249_netchg < 0.
        value max(0., SJR256_Mlrtn_fldrel + SJR249_unmet1)}
    case otherwise {
        condition always
        value SJR256_Mlrtn_fldrel}
}
define SJR249_unmet2 {value min(0.,SJR249_unmet1 + SJR256_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR249_Mlrtn_mainrel {
    case depletion {
        condition SJR249_netchg < 0.
        value max(0.,SJR256_Mlrtn_mainrel + SJR249_unmet2)}
    case otherwise {
        condition always
        value SJR256_Mlrtn_mainrel}
}
define SJR249_otherflow_dv {alias SJR249_otherflow kind 'alias' units 'cfs'}
define SJR249_Mlrtn_mainrel_dv {alias SJR249_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR249_Mlrtn_fldrel_dv {alias SJR249_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR249_netchg_dv {alias SJR249_netchg kind 'alias' units 'cfs'}

!************* Node 242
! Connectivity *** goal continuitySJR242       {C_SJR249 + SG57_SJR242_7 - C_SJR242          = 0.}  
define SJR242_netchg {value SG57_SJR242_7[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR242_otherflow {
        case depletion {
        condition SJR242_netchg < 0.
        value max(0., SJR249_otherflow + SJR242_netchg)}
    case otherwise {
        condition always
        value SJR249_otherflow + SJR242_netchg}
}
define SJR242_unmet1 {value min(0.,SJR242_netchg + SJR249_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR242_Mlrtn_fldrel {
        case depletion {
        condition SJR242_netchg < 0.
        value max(0., SJR249_Mlrtn_fldrel + SJR242_unmet1)}
    case otherwise {
        condition always
        value SJR249_Mlrtn_fldrel}
}
define SJR242_unmet2 {value min(0.,SJR242_unmet1 + SJR249_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR242_Mlrtn_mainrel {
    case depletion {
        condition SJR242_netchg < 0.
        value max(0.,SJR249_Mlrtn_mainrel + SJR242_unmet2)}
    case otherwise {
        condition always
        value SJR249_Mlrtn_mainrel}
}
define SJR242_otherflow_dv {alias SJR242_otherflow kind 'alias' units 'cfs'}
define SJR242_Mlrtn_mainrel_dv {alias SJR242_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR242_Mlrtn_fldrel_dv {alias SJR242_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR242_netchg_dv {alias SJR242_netchg kind 'alias' units 'cfs'}

!************* Node 235
! Connectivity *** goal continuitySJR235       {C_SJR242  + SG58_SJR235_7 + R_64_PA1_SJR235 - C_SJR235         = 0.} 
define SJR235_netchg {value SG58_SJR235_7[WHEELJPOD] + R_64_PA1_SJR235[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR235_otherflow {
        case depletion {
        condition SJR235_netchg < 0.
        value max(0., SJR242_otherflow + SJR235_netchg)}
    case otherwise {
        condition always
        value SJR242_otherflow + SJR235_netchg}
}
define SJR235_unmet1 {value min(0.,SJR235_netchg + SJR242_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR235_Mlrtn_fldrel {
        case depletion {
        condition SJR235_netchg < 0.
        value max(0., SJR242_Mlrtn_fldrel + SJR235_unmet1)}
    case otherwise {
        condition always
        value SJR242_Mlrtn_fldrel}
}
define SJR235_unmet2 {value min(0.,SJR235_unmet1 + SJR242_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR235_Mlrtn_mainrel {
    case depletion {
        condition SJR235_netchg < 0.
        value max(0.,SJR242_Mlrtn_mainrel + SJR235_unmet2)}
    case otherwise {
        condition always
        value SJR242_Mlrtn_mainrel}
}
define SJR235_otherflow_dv {alias SJR235_otherflow kind 'alias' units 'cfs'}
define SJR235_Mlrtn_mainrel_dv {alias SJR235_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR235_Mlrtn_fldrel_dv {alias SJR235_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR235_netchg_dv {alias SJR235_netchg kind 'alias' units 'cfs'}

!************* Node 227
! Connectivity *** goal continuitySJR227       {C_SJR235  + SR_64_SJR227 + SG59_SJR227_7 - D_SJR227_64_PA3 - C_SJR227 + TD_SJR227_059 = 0.} 
define SJR227_netchg {value SR_64_SJR227[WHEELJPOD] + SG59_SJR227_7[WHEELJPOD] - D_SJR227_64_PA3[WHEELJPOD] + TD_SJR227_059[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR227_otherflow {
        case depletion {
        condition SJR227_netchg < 0.
        value max(0., SJR235_otherflow + SJR227_netchg)}
    case otherwise {
        condition always
        value SJR235_otherflow + SJR227_netchg}
}
define SJR227_unmet1 {value min(0.,SJR227_netchg + SJR235_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR227_Mlrtn_fldrel {
        case depletion {
        condition SJR227_netchg < 0.
        value max(0., SJR235_Mlrtn_fldrel + SJR227_unmet1)}
    case otherwise {
        condition always
        value SJR235_Mlrtn_fldrel}
}
define SJR227_unmet2 {value min(0.,SJR227_unmet1 + SJR235_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR227_Mlrtn_mainrel {
    case depletion {
        condition SJR227_netchg < 0.
        value max(0.,SJR235_Mlrtn_mainrel + SJR227_unmet2)}
    case otherwise {
        condition always
        value SJR235_Mlrtn_mainrel}
}
define SJR227_otherflow_dv {alias SJR227_otherflow kind 'alias' units 'cfs'}
define SJR227_Mlrtn_mainrel_dv {alias SJR227_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR227_Mlrtn_fldrel_dv {alias SJR227_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR227_netchg_dv {alias SJR227_netchg kind 'alias' units 'cfs'}

!************* Node 225
! Connectivity *** goal continuitySJR225       {C_SJR227 - C_SJR225  + CT_GRAVELLYFORD            = 0.} 
define SJR225_netchg {value CT_GRAVELLYFORD[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR225_otherflow {
        case depletion {
        condition SJR225_netchg < 0.
        value max(0., SJR227_otherflow + SJR225_netchg)}
    case otherwise {
        condition always
        value SJR227_otherflow + SJR225_netchg}
}
define SJR225_unmet1 {value min(0.,SJR225_netchg + SJR227_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR225_Mlrtn_fldrel {
        case depletion {
        condition SJR225_netchg < 0.
        value max(0., SJR227_Mlrtn_fldrel + SJR225_unmet1)}
    case otherwise {
        condition always
        value SJR227_Mlrtn_fldrel}
}
define SJR225_unmet2 {value min(0.,SJR225_unmet1 + SJR227_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR225_Mlrtn_mainrel {
    case depletion {
        condition SJR225_netchg < 0.
        value max(0.,SJR227_Mlrtn_mainrel + SJR225_unmet2)}
    case otherwise {
        condition always
        value SJR227_Mlrtn_mainrel}
}
define SJR225_otherflow_dv {alias SJR225_otherflow kind 'alias' units 'cfs'}
define SJR225_Mlrtn_mainrel_dv {alias SJR225_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR225_Mlrtn_fldrel_dv {alias SJR225_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR225_netchg_dv {alias SJR225_netchg kind 'alias' units 'cfs'}


!************* Node 221
! Connectivity *** goal continuitySJR221       {C_SJR225 + SG60_SJR221_7 - C_SJR221         = 0.}  
define SJR221_netchg {value SG60_SJR221_7[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR221_otherflow {
        case depletion {
        condition SJR221_netchg < 0.
        value max(0., SJR225_otherflow + SJR221_netchg)}
    case otherwise {
        condition always
        value SJR225_otherflow + SJR221_netchg}
}
define SJR221_unmet1 {value min(0.,SJR221_netchg + SJR225_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR221_Mlrtn_fldrel {
        case depletion {
        condition SJR221_netchg < 0.
        value max(0., SJR225_Mlrtn_fldrel + SJR221_unmet1)}
    case otherwise {
        condition always
        value SJR225_Mlrtn_fldrel}
}
define SJR221_unmet2 {value min(0.,SJR221_unmet1 + SJR225_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR221_Mlrtn_mainrel {
    case depletion {
        condition SJR221_netchg < 0.
        value max(0.,SJR225_Mlrtn_mainrel + SJR221_unmet2)}
    case otherwise {
        condition always
        value SJR225_Mlrtn_mainrel}
}
define SJR221_otherflow_dv {alias SJR221_otherflow kind 'alias' units 'cfs'}
define SJR221_Mlrtn_mainrel_dv {alias SJR221_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR221_Mlrtn_fldrel_dv {alias SJR221_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR221_netchg_dv {alias SJR221_netchg kind 'alias' units 'cfs'}

!Have to track flows into the Chowchilla bypass (D_SJR214_EBP001), then need to compute how much comes outt the Eastside Bypass and Mariosa bypass
!************* Node 214
! Connectivity ***goal continuitySJR214       {C_SJR221  + SG61_SJR214_7 + SR_64_SJR214 - D_SJR214_EBP001 - C_SJR214  = 0.} !Chowchilla Bypass  
! First thing to do is to track flows into the Chowchilla Bypass, assume all are flood flows but calculate what remains to check
define D_SJR214_EBP001_fldflow {value min(D_SJR214_EBP001[WHEELJPOD],SJR221_Mlrtn_fldrel)}
define D_SJR214_EBP001_restflow {value D_SJR214_EBP001[WHEELJPOD] - D_SJR214_EBP001_fldflow}
!From here on flows that went into the Chowchilla Bypass are removed
define SJR221_Mlrtn_fldreladj {value SJR221_Mlrtn_fldrel - D_SJR214_EBP001_fldflow} 
define SJR221_Mlrtn_mainreladj {value SJR221_Mlrtn_mainrel - D_SJR214_EBP001_restflow }
define SJR214_netchg {value SG61_SJR214_7[WHEELJPOD] + SR_64_SJR214[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR214_otherflow {
        case depletion {
        condition SJR214_netchg < 0.
        value max(0., SJR221_otherflow + SJR214_netchg)}
    case otherwise {
        condition always
        value SJR221_otherflow + SJR214_netchg}
}
define SJR214_unmet1 {value min(0.,SJR214_netchg + SJR221_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR214_Mlrtn_fldrel {
        case depletion {
        condition SJR214_netchg < 0.
        value max(0., SJR221_Mlrtn_fldreladj + SJR214_unmet1)}
    case otherwise {
        condition always
        value SJR221_Mlrtn_fldreladj}
}
define SJR214_unmet2 {value min(0.,SJR214_unmet1 + SJR221_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR214_Mlrtn_mainrel {
    case depletion {
        condition SJR214_netchg < 0.
        value max(0.,SJR221_Mlrtn_mainreladj + SJR214_unmet2)}
    case otherwise {
        condition always
        value SJR221_Mlrtn_mainreladj}
}
define SJR214_otherflow_dv {alias SJR214_otherflow kind 'alias' units 'cfs'}
define SJR214_Mlrtn_mainrel_dv {alias SJR214_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR214_Mlrtn_fldrel_dv {alias SJR214_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR214_netchg_dv {alias SJR214_netchg kind 'alias' units 'cfs'}

define D_SJR214_EBP001_fldflow_dv {alias D_SJR214_EBP001_fldflow kind 'alias' units 'cfs'}
define D_SJR214_EBP001_restflow_dv {alias D_SJR214_EBP001_restflow kind 'alias' units 'cfs'}

!************* Node 213
! Connectivity *** goal continuitySJR213       {C_SJR214  - C_SJR213              = 0.}  
! No additional tracking needed

!************* Node 205
! Connectivity *** goal continuitySJR205       {C_SJR213  - D_SJR205_SJR201 - C_SJR205  + SG62_SJR205_7 + SG63_SJR205_8  = 0.} !Outflow to Mendota Pool Bypass 
! What to do here:
! First remove restoration flows and save those to be put back in downstream.
! These flows can come from main flow releases or accretions, so pull first from mainrel, then from otherrel, then from floodrel if that is needed (hopefully not).
! Then using the rest of the water partition things as normal through node 205 and Mendota Pool
! At node 201 and downstream switch partitioning to flood flows, restoration flows, and other flows 
define D_SJR205_SJR201_mainflow {value min(D_SJR205_SJR201[WHEELJPOD],SJR214_Mlrtn_mainrel)}
define D_SJR205_SJR201_otherflow {value min(D_SJR205_SJR201[WHEELJPOD] - D_SJR205_SJR201_mainflow, SJR214_otherflow)}
define D_SJR205_SJR201_fldflow {value min(D_SJR205_SJR201[WHEELJPOD] - D_SJR205_SJR201_mainflow - D_SJR205_SJR201_otherflow, SJR214_Mlrtn_fldrel)}
!From here on SJRR flows are removed
define SJR214_Mlrtn_fldreladj {value SJR214_Mlrtn_fldrel - D_SJR205_SJR201_fldflow } 
define SJR214_Mlrtn_mainreladj {value SJR214_Mlrtn_mainrel - D_SJR205_SJR201_mainflow }
define SJR214_otherflowadj {value SJR214_otherflow - D_SJR205_SJR201_otherflow }
define SJR205_netchg {value SG62_SJR205_7[WHEELJPOD] + SG63_SJR205_8[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR205_otherflow {
        case depletion {
        condition SJR205_netchg < 0.
        value max(0., SJR214_otherflowadj + SJR205_netchg)}
    case otherwise {
        condition always
        value SJR214_otherflowadj + SJR205_netchg}
}
define SJR205_unmet1 {value min(0.,SJR205_netchg + SJR214_otherflowadj)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR205_Mlrtn_fldrel {
        case depletion {
        condition SJR205_netchg < 0.
        value max(0., SJR214_Mlrtn_fldreladj + SJR205_unmet1)}
    case otherwise {
        condition always
        value SJR214_Mlrtn_fldreladj}
}
define SJR205_unmet2 {value min(0.,SJR205_unmet1 + SJR214_Mlrtn_fldreladj)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR205_Mlrtn_mainrel {
    case depletion {
        condition SJR205_netchg < 0.
        value max(0.,SJR214_Mlrtn_mainreladj + SJR205_unmet2)}
    case otherwise {
        condition always
        value SJR214_Mlrtn_mainreladj}
}
define SJR205_otherflow_dv {alias SJR205_otherflow kind 'alias' units 'cfs'}
define SJR205_Mlrtn_mainrel_dv {alias SJR205_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJR205_Mlrtn_fldrel_dv {alias SJR205_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR205_netchg_dv {alias SJR205_netchg kind 'alias' units 'cfs'}

define D_SJR205_SJR201_mainflow_dv {alias D_SJR205_SJR201_mainflow kind 'alias' units 'cfs'}
define D_SJR205_SJR201_otherflow_dv {alias D_SJR205_SJR201_otherflow kind 'alias' units 'cfs'}
define D_SJR205_SJR201_floodflow_dv {alias D_SJR205_SJR201_fldflow kind 'alias' units 'cfs'}

!************* Node MDOTA
! Connectivity *** goal continuityMDOTA        {C_SJR205  + SG_MDOTA_872 + C_DMC116 + C_FSL005 /*+ I_MDOTA_WTS*/ - C_MDOTA  - D_MDOTA_64_XA - D_MDOTA_73_XA - D_MDOTA_90_PA1 
!                            - D_MDOTA_91_PR - D_MDOTA_91_PA - D_MDOTA_XCC010               = 0.} !Mendota Pool
define SJRMDOTA_netchg {value SG_MDOTA_872[WHEELJPOD] + C_DMC116[WHEELJPOD] + C_FSL005[WHEELJPOD] - D_MDOTA_64_XA[WHEELJPOD] - D_MDOTA_73_XA[WHEELJPOD] - D_MDOTA_90_PA1[WHEELJPOD] - D_MDOTA_91_PR[WHEELJPOD] - D_MDOTA_91_PA[WHEELJPOD] - D_MDOTA_XCC010[WHEELJPOD] } !Net inflow/diversion/accretion/depletion other than river inflow
define SJRMDOTA_otherflow {
        case depletion {
        condition SJRMDOTA_netchg < 0.
        value max(0., SJR205_otherflow + SJRMDOTA_netchg)}
    case otherwise {
        condition always
        value SJR205_otherflow + SJRMDOTA_netchg}
}
define SJRMDOTA_unmet1 {value min(0.,SJRMDOTA_netchg + SJR205_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJRMDOTA_Mlrtn_fldrel {
        case depletion {
        condition SJRMDOTA_netchg < 0.
        value max(0., SJR205_Mlrtn_fldrel + SJRMDOTA_unmet1)}
    case otherwise {
        condition always
        value SJR205_Mlrtn_fldrel}
}
define SJRMDOTA_unmet2 {value min(0.,SJRMDOTA_unmet1 + SJR205_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJRMDOTA_Mlrtn_mainrel {
    case depletion {
        condition SJRMDOTA_netchg < 0.
        value max(0.,SJR205_Mlrtn_mainrel + SJRMDOTA_unmet2)}
    case otherwise {
        condition always
        value SJR205_Mlrtn_mainrel}
}
define SJRMDOTA_otherflow_dv {alias SJRMDOTA_otherflow kind 'alias' units 'cfs'}
define SJRMDOTA_Mlrtn_mainrel_dv {alias SJRMDOTA_Mlrtn_mainrel kind 'alias' units 'cfs'}
define SJRMDOTA_Mlrtn_fldrel_dv {alias SJRMDOTA_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJRMDOTA_netchg_dv {alias SJRMDOTA_netchg kind 'alias' units 'cfs'}

!************* Node 201
!Need to put SJRR flows back in here
! Connectivity *** goal continuitySJR201       {C_MDOTA + D_SJR205_SJR201 - C_SJR201               = 0.} !Inflow from Mendota Pool Bypass
! No additional tracking needed, except that from here on SJRR flows are added back in
! From here tracking is of SJRR flows instead of main flows, other components are flood flow and other flow

/*define SJR201_Mlrtn_fldrel {value SJRMDOTA_Mlrtn_fldrel + D_SJR205_SJR201_fldflow } 
define SJR201_SJRRflow {value SJRMDOTA_Mlrtn_mainrel + D_SJR205_SJR201_mainflow }
define SJR201_otherflow {value SJRMDOTA_otherflow + D_SJR205_SJR201_otherflow }*/

!Need to adjust some calcs here so that SJRR flow below restoration reach is always = to flows in the restoration reach, 
!if there is additional main flow which can happen due to the release schedule which is not spills, shift that flow to other flows
define SJR201_Mlrtn_fldrel {value SJRMDOTA_Mlrtn_fldrel } 
define SJR201_SJRRflow {value D_SJR205_SJR201[WHEELJPOD] }
define redSJRRflow {value max(0., SJRMDOTA_Mlrtn_mainrel + D_SJR205_SJR201_mainflow - D_SJR205_SJR201[WHEELJPOD] )}
define SJR201_otherflow {value SJRMDOTA_otherflow + redSJRRflow}

define SJR201_otherflow_dv {alias SJR201_otherflow kind 'alias' units 'cfs'}
define SJR201_SJRRflow_dv {alias SJR201_SJRRflow kind 'alias' units 'cfs'}
define SJR201_Mlrtn_fldrel_dv {alias SJR201_Mlrtn_fldrel kind 'alias' units 'cfs'}

!************* Node 200
! Connectivity *** goal continuitySJR200       {C_SJR201  - C_SJR200                       = 0.} !USGS 11254000 SJR Nr Mendota 
! No additional tracking needed

!************* Node 198
! Connectivity *** goal continuitySJR198       {C_SJR200  + SG64_SJR198_8 - C_SJR198       = 0.} 
define SJR198_netchg {value SG64_SJR198_8[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR198_otherflow {
        case depletion {
        condition SJR198_netchg < 0.
        value max(0., SJR201_otherflow + SJR198_netchg)}
    case otherwise {
        condition always
        value SJR201_otherflow + SJR198_netchg}
}
define SJR198_unmet1 {value min(0.,SJR198_netchg + SJR201_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR198_Mlrtn_fldrel {
        case depletion {
        condition SJR198_netchg < 0.
        value max(0., SJR201_Mlrtn_fldrel + SJR198_unmet1)}
    case otherwise {
        condition always
        value SJR201_Mlrtn_fldrel}
}
define SJR198_unmet2 {value min(0.,SJR198_unmet1 + SJR201_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR198_SJRRflow {
    case depletion {
        condition SJR198_netchg < 0.
        value max(0.,SJR201_SJRRflow + SJR198_unmet2)}
    case otherwise {
        condition always
        value SJR201_SJRRflow}
}
define SJR198_otherflow_dv {alias SJR198_otherflow kind 'alias' units 'cfs'}
define SJR198_SJRRflow_dv {alias SJR198_SJRRflow kind 'alias' units 'cfs'}
define SJR198_Mlrtn_fldrel_dv {alias SJR198_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR198_netchg_dv {alias SJR198_netchg kind 'alias' units 'cfs'}

!************* Node 195
! Connectivity ***  goal continuitySJR195       {C_SJR198  + C_FBW001 - C_SJR195             = 0.} 
define SJR195_netchg {value C_FBW001[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR195_otherflow {
        case depletion {
        condition SJR195_netchg < 0.
        value max(0., SJR198_otherflow + SJR195_netchg)}
    case otherwise {
        condition always
        value SJR198_otherflow + SJR195_netchg}
}
define SJR195_unmet1 {value min(0.,SJR195_netchg + SJR198_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR195_Mlrtn_fldrel {
        case depletion {
        condition SJR195_netchg < 0.
        value max(0., SJR198_Mlrtn_fldrel + SJR195_unmet1)}
    case otherwise {
        condition always
        value SJR198_Mlrtn_fldrel}
}
define SJR195_unmet2 {value min(0.,SJR195_unmet1 + SJR198_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR195_SJRRflow {
    case depletion {
        condition SJR195_netchg < 0.
        value max(0.,SJR198_SJRRflow + SJR195_unmet2)}
    case otherwise {
        condition always
        value SJR198_SJRRflow}
}
define SJR195_otherflow_dv {alias SJR195_otherflow kind 'alias' units 'cfs'}
define SJR195_SJRRflow_dv {alias SJR195_SJRRflow kind 'alias' units 'cfs'}
define SJR195_Mlrtn_fldrel_dv {alias SJR195_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR195_netchg_dv {alias SJR195_netchg kind 'alias' units 'cfs'}

!************* Node 192
! Connectivity ***  goal continuitySJR192       {C_SJR195  + SG65_SJR192_8 - C_SJR192           = 0.} 
define SJR192_netchg {value SG65_SJR192_8[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR192_otherflow {
        case depletion {
        condition SJR192_netchg < 0.
        value max(0., SJR195_otherflow + SJR192_netchg)}
    case otherwise {
        condition always
        value SJR195_otherflow + SJR192_netchg}
}
define SJR192_unmet1 {value min(0.,SJR192_netchg + SJR195_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR192_Mlrtn_fldrel {
        case depletion {
        condition SJR192_netchg < 0.
        value max(0., SJR195_Mlrtn_fldrel + SJR192_unmet1)}
    case otherwise {
        condition always
        value SJR195_Mlrtn_fldrel}
}
define SJR192_unmet2 {value min(0.,SJR192_unmet1 + SJR195_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR192_SJRRflow {
    case depletion {
        condition SJR192_netchg < 0.
        value max(0.,SJR195_SJRRflow + SJR192_unmet2)}
    case otherwise {
        condition always
        value SJR195_SJRRflow}
}
define SJR192_otherflow_dv {alias SJR192_otherflow kind 'alias' units 'cfs'}
define SJR192_SJRRflow_dv {alias SJR192_SJRRflow kind 'alias' units 'cfs'}
define SJR192_Mlrtn_fldrel_dv {alias SJR192_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR192_netchg_dv {alias SJR192_netchg kind 'alias' units 'cfs'}

!************* Node 185
! Connectivity *** goal continuitySJR180       {C_SJR192  + SG66_SJR180_8 + R_64_XA_SJR180 - C_SJR180   = 0.} 
define SJR185_netchg {value SG66_SJR185_8[WHEELJPOD] + R_64_XA_SJR185[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR185_otherflow {
        case depletion {
        condition SJR185_netchg < 0.
        value max(0., SJR192_otherflow + SJR185_netchg)}
    case otherwise {
        condition always
        value SJR192_otherflow + SJR185_netchg}
}
define SJR185_unmet1 {value min(0.,SJR185_netchg + SJR192_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR185_Mlrtn_fldrel {
        case depletion {
        condition SJR185_netchg < 0.
        value max(0., SJR192_Mlrtn_fldrel + SJR185_unmet1)}
    case otherwise {
        condition always
        value SJR192_Mlrtn_fldrel}
}
define SJR185_unmet2 {value min(0.,SJR185_unmet1 + SJR192_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR185_SJRRflow {
    case depletion {
        condition SJR185_netchg < 0.
        value max(0.,SJR192_SJRRflow + SJR185_unmet2)}
    case otherwise {
        condition always
        value SJR192_SJRRflow}
}
define SJR185_otherflow_dv {alias SJR185_otherflow kind 'alias' units 'cfs'}
define SJR185_SJRRflow_dv {alias SJR185_SJRRflow kind 'alias' units 'cfs'}
define SJR185_Mlrtn_fldrel_dv {alias SJR185_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR185_netchg_dv {alias SJR185_netchg kind 'alias' units 'cfs'}

!************* Node 180
! Connectivity *** goal continuitySJR180       {C_SJR180  + SG67_SJR180_8 + SR_64_SJR180 - D_SJR180_ARY010 - C_SJR180 + TD_SJR180_067   = 0.} !Sack Dam  
define SJR180_netchg {value SG67_SJR180_8[WHEELJPOD] + SR_64_SJR180[WHEELJPOD] - D_SJR180_ARY010[WHEELJPOD] + TD_SJR180_067[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR180_otherflow {
        case depletion {
        condition SJR180_netchg < 0.
        value max(0., SJR185_otherflow + SJR180_netchg)}
    case otherwise {
        condition always
        value SJR185_otherflow + SJR180_netchg}
}
define SJR180_unmet1 {value min(0.,SJR180_netchg + SJR185_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR180_Mlrtn_fldrel {
        case depletion {
        condition SJR180_netchg < 0.
        value max(0., SJR185_Mlrtn_fldrel + SJR180_unmet1)}
    case otherwise {
        condition always
        value SJR185_Mlrtn_fldrel}
}
define SJR180_unmet2 {value min(0.,SJR180_unmet1 + SJR185_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR180_SJRRflow {
    case depletion {
        condition SJR180_netchg < 0.
        value max(0.,SJR185_SJRRflow + SJR180_unmet2)}
    case otherwise {
        condition always
        value SJR185_SJRRflow}
}
define SJR180_otherflow_dv {alias SJR180_otherflow kind 'alias' units 'cfs'}
define SJR180_SJRRflow_dv {alias SJR180_SJRRflow kind 'alias' units 'cfs'}
define SJR180_Mlrtn_fldrel_dv {alias SJR180_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR180_netchg_dv {alias SJR180_netchg kind 'alias' units 'cfs'}

!************* Node 179
! Connectivity *** goal continuitySJR179       {C_SJR180 - C_SJR179                            = 0.} !SJR Near Dos Palos
! No additional tracking needed

!************* Node 173
! Connectivity *** goal continuitySJR173       {C_SJR179 + SG68_SJR173_8 + SG78_SJR173_10 - C_SJR173           = 0.} 
define SJR173_netchg {value SG68_SJR173_8[WHEELJPOD] + SG78_SJR173_10[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR173_otherflow {
        case depletion {
        condition SJR173_netchg < 0.
        value max(0., SJR180_otherflow + SJR173_netchg)}
    case otherwise {
        condition always
        value SJR180_otherflow + SJR173_netchg}
}
define SJR173_unmet1 {value min(0.,SJR173_netchg + SJR180_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR173_Mlrtn_fldrel {
        case depletion {
        condition SJR173_netchg < 0.
        value max(0., SJR180_Mlrtn_fldrel + SJR173_unmet1)}
    case otherwise {
        condition always
        value SJR180_Mlrtn_fldrel}
}
define SJR173_unmet2 {value min(0.,SJR173_unmet1 + SJR180_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR173_SJRRflow {
    case depletion {
        condition SJR173_netchg < 0.
        value max(0.,SJR180_SJRRflow + SJR173_unmet2)}
    case otherwise {
        condition always
        value SJR180_SJRRflow}
}
define SJR173_otherflow_dv {alias SJR173_otherflow kind 'alias' units 'cfs'}
define SJR173_SJRRflow_dv {alias SJR173_SJRRflow kind 'alias' units 'cfs'}
define SJR173_Mlrtn_fldrel_dv {alias SJR173_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR173_netchg_dv {alias SJR173_netchg kind 'alias' units 'cfs'}

!************* Node 166
!**** At this location all water goes into the Eastside Bypass through D_SJR166_EBP032 ****
! Just track that water and put it back in the river further downstream where approproate
! Connectivity *** goal continuitySJR166       {C_SJR173 + SG79_SJR166_10 + SG89_SJR166_12 - D_SJR166_EBP032 - C_SJR166    = 0.} 
! Priority is to keep SJRR flows in the river, then flood flows
define D_SJR166_EBP032_SJRRflow {value min(D_SJR166_EBP032[WHEELJPOD],SJR173_SJRRflow)}
define D_SJR166_EBP032_fldflow {value min(max(0., D_SJR166_EBP032[WHEELJPOD] - D_SJR166_EBP032_SJRRflow), SJR173_Mlrtn_fldrel)}
define D_SJR166_EBP032_otherflow {value max(0., D_SJR166_EBP032[WHEELJPOD] - D_SJR166_EBP032_SJRRflow - D_SJR166_EBP032_fldflow)}

define D_SJR166_EBP032_SJRRflow_dv {alias D_SJR166_EBP032_SJRRflow kind 'alias' units 'cfs'}
define D_SJR166_EBP032_fldflow_dv {alias D_SJR166_EBP032_fldflow kind 'alias' units 'cfs'}
define D_SJR166_EBP032_otherflow_dv {alias D_SJR166_EBP032_otherflow kind 'alias' units 'cfs'}

!*** No calculations needed at nodes 157 and 152, since all flow went into the bypass

!************* Node 145
! Connectivity *** goal continuitySJR145       {C_SJR152 + SG92_SJR145_12 + SG102_SJR145_14 + SP_EBP041_SJR145 - C_SJR145  = 0.} 
define SJR145_netchg {value SG92_SJR145_12[WHEELJPOD] + SG102_SJR145_14[WHEELJPOD] + C_SJR152[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
!Need to calculate flows coming in from the bypass, use water computed earlier that went into the Eastside Bypass, remaining water will come in downstream at node 134
define SP_EBP041_SJR145_SJRRflow {value min(SP_EBP041_SJR145[WHEELJPOD], D_SJR166_EBP032_SJRRflow)}
define SP_EBP041_SJR145_remaining1 {value SP_EBP041_SJR145[WHEELJPOD] - SP_EBP041_SJR145_SJRRflow}
define SP_EBP041_SJR145_fldflow {value min(SP_EBP041_SJR145_remaining1, D_SJR166_EBP032_fldflow + D_SJR214_EBP001_fldflow)}
define SP_EBP041_SJR145_remaining2 {value SP_EBP041_SJR145_remaining1 - SP_EBP041_SJR145_fldflow}
define SP_EBP041_SJR145_otherflow {value SP_EBP041_SJR145_remaining2} !min(SP_EBP041_SJR145_remaining2, D_SJR166_EBP032_otherflow + D_SJR214_EBP001_restflow)}
define SP_EBP041_SJR145_remaining3 {value SP_EBP041_SJR145_remaining2 - SP_EBP041_SJR145_otherflow}
!For later use compute how much flow of each type is still in the bypass (will come in at node 134)
define EBP145_SJRR_flow_remain {value max(0.,D_SJR166_EBP032_SJRRflow - SP_EBP041_SJR145_SJRRflow)}
define EBP145_fld_flow_remain {value max(0.,D_SJR166_EBP032_fldflow + D_SJR214_EBP001_fldflow - SP_EBP041_SJR145_fldflow)}
define EBP145_other_flow_remain {value max(0.,D_SJR166_EBP032_otherflow + D_SJR214_EBP001_restflow - SP_EBP041_SJR145_otherflow)}

define SJR145_otherflow {
        case depletion {
        condition SJR145_netchg < 0.
        value max(0., SP_EBP041_SJR145_otherflow + SJR145_netchg)}
    case otherwise {
        condition always
        value SP_EBP041_SJR145_otherflow + SJR145_netchg}
}
define SJR145_unmet1 {value min(0.,SJR145_netchg + SP_EBP041_SJR145_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR145_Mlrtn_fldrel {
        case depletion {
        condition SJR145_netchg < 0.
        value max(0., SP_EBP041_SJR145_fldflow + SJR145_unmet1)}
    case otherwise {
        condition always
        value SP_EBP041_SJR145_fldflow}
}
define SJR145_unmet2 {value min(0.,SJR145_unmet1 + SP_EBP041_SJR145_fldflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR145_SJRRflow {
    case depletion {
        condition SJR145_netchg < 0.
        value max(0.,SP_EBP041_SJR145_SJRRflow + SJR145_unmet2)}
    case otherwise {
        condition always
        value SP_EBP041_SJR145_SJRRflow}
}
define SJR145_otherflow_dv {alias SJR145_otherflow kind 'alias' units 'cfs'}
define SJR145_SJRRflow_dv {alias SJR145_SJRRflow kind 'alias' units 'cfs'}
define SJR145_Mlrtn_fldrel_dv {alias SJR145_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR145_netchg_dv {alias SJR145_netchg kind 'alias' units 'cfs'}

define SP_EBP041_SJR145_SJRRflow_dv {alias SP_EBP041_SJR145_SJRRflow kind 'alias' units 'cfs'}
define SP_EBP041_SJR145_remaining1_dv {alias SP_EBP041_SJR145_remaining1 kind 'alias' units 'cfs'}
define SP_EBP041_SJR145_fldflow_dv {alias SP_EBP041_SJR145_fldflow kind 'alias' units 'cfs'}
define SP_EBP041_SJR145_remaining2_dv {alias SP_EBP041_SJR145_remaining2 kind 'alias' units 'cfs'}
define SP_EBP041_SJR145_otherflow_dv {alias SP_EBP041_SJR145_otherflow kind 'alias' units 'cfs'}
define SP_EBP041_SJR145_remaining3_dv {alias SP_EBP041_SJR145_remaining3 kind 'alias' units 'cfs'}

define EBP145_SJRR_flow_remain_dv {alias EBP145_SJRR_flow_remain kind 'alias' units 'cfs'}
define EBP145_fld_flow_remain_dv {alias EBP145_fld_flow_remain kind 'alias' units 'cfs'}
define EBP145_other_flow_remain_dv {alias EBP145_other_flow_remain kind 'alias' units 'cfs'}

!************* Node 141
! Connectivity *** goal continuitySJR141       {C_SJR145 + SG103_SJR141_14 - C_SJR141                  = 0.} 
define SJR141_netchg {value SG103_SJR141_14[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR141_otherflow {
        case depletion {
        condition SJR141_netchg < 0.
        value max(0., SJR145_otherflow + SJR141_netchg)}
    case otherwise {
        condition always
        value SJR145_otherflow + SJR141_netchg}
}
define SJR141_unmet1 {value min(0.,SJR141_netchg + SJR145_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR141_Mlrtn_fldrel {
        case depletion {
        condition SJR141_netchg < 0.
        value max(0., SJR145_Mlrtn_fldrel + SJR141_unmet1)}
    case otherwise {
        condition always
        value SJR145_Mlrtn_fldrel}
}
define SJR141_unmet2 {value min(0.,SJR141_unmet1 + SJR145_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR141_SJRRflow {
    case depletion {
        condition SJR141_netchg < 0.
        value max(0.,SJR145_SJRRflow + SJR141_unmet2)}
    case otherwise {
        condition always
        value SJR145_SJRRflow}
}
define SJR141_otherflow_dv {alias SJR141_otherflow kind 'alias' units 'cfs'}
define SJR141_SJRRflow_dv {alias SJR141_SJRRflow kind 'alias' units 'cfs'}
define SJR141_Mlrtn_fldrel_dv {alias SJR141_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR141_netchg_dv {alias SJR141_netchg kind 'alias' units 'cfs'}

!************* Node 134
! Connectivity *** goal continuitySJR134       {C_SJR141 + SG104_SJR134_14 + SG113_SJR134_16 + SR_63_SJR134 + R_63_PR3_SJR134 + C_EBP050 - C_SJR134 + TD_SJR134_103 = 0.} !Confluence with Chowchilla/Eastside Bypass
define SJR134_netchg {value SG104_SJR134_14[WHEELJPOD] + SG113_SJR134_16[WHEELJPOD] + SR_63_SJR134[WHEELJPOD] + R_63_PR3_SJR134[WHEELJPOD] + TD_SJR134_103[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
!Need to calculate flows coming in from the bypass, use water computed earlier that did not ome in at node 145
define C_EBP050_SJRRflow {value min(C_EBP050[WHEELJPOD], EBP145_SJRR_flow_remain)}
define C_EBP050_remaining1 {value C_EBP050[WHEELJPOD] - C_EBP050_SJRRflow}
define C_EBP050_fldflow {value min(C_EBP050_remaining1, EBP145_fld_flow_remain)}
define C_EBP050_remaining2 {value C_EBP050_remaining1 - C_EBP050_fldflow}
define C_EBP050_otherflow {value C_EBP050_remaining2} !min(C_EBP050_remaining2, EBP145_other_flow_remain)}
define C_EBP050_remaining3 {value C_EBP050_remaining2 - C_EBP050_otherflow}
!For checking purposes compute how much flow of each type is left (there shouldn't be any?)
define EBP134_SJRR_flow_remain {value max(0., EBP145_SJRR_flow_remain - C_EBP050_SJRRflow)}
define EBP134_fld_flow_remain {value max(0., EBP145_fld_flow_remain - C_EBP050_fldflow)}
define EBP134_other_flow_remain {value max(0., EBP145_other_flow_remain - C_EBP050_otherflow)}

define SJR134_otherflow {
        case depletion {
        condition SJR134_netchg < 0.
        value max(0., SJR141_otherflow + C_EBP050_otherflow + SJR134_netchg)}
    case otherwise {
        condition always
        value SJR141_otherflow + C_EBP050_otherflow + SJR134_netchg}
}
define SJR134_unmet1 {value min(0.,SJR134_netchg + SJR141_otherflow + C_EBP050_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR134_Mlrtn_fldrel {
        case depletion {
        condition SJR134_netchg < 0.
        value max(0., SJR141_Mlrtn_fldrel + C_EBP050_fldflow + SJR134_unmet1)}
    case otherwise {
        condition always
        value SJR141_Mlrtn_fldrel + C_EBP050_fldflow}
}
define SJR134_unmet2 {value min(0.,SJR134_unmet1 + SJR141_Mlrtn_fldrel + C_EBP050_fldflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR134_SJRRflow {
    case depletion {
        condition SJR134_netchg < 0.
        value max(0.,SJR141_SJRRflow + C_EBP050_SJRRflow + SJR134_unmet2)}
    case otherwise {
        condition always
        value SJR141_SJRRflow + C_EBP050_SJRRflow}
}
define SJR134_otherflow_dv {alias SJR134_otherflow kind 'alias' units 'cfs'}
define SJR134_SJRRflow_dv {alias SJR134_SJRRflow kind 'alias' units 'cfs'}
define SJR134_Mlrtn_fldrel_dv {alias SJR134_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR134_netchg_dv {alias SJR134_netchg kind 'alias' units 'cfs'}

define C_EBP050_SJRRflow_dv {alias C_EBP050_SJRRflow kind 'alias' units 'cfs'}
define C_EBP050_remaining1_dv {alias C_EBP050_remaining1 kind 'alias' units 'cfs'}
define C_EBP050_fldflow_dv {alias C_EBP050_fldflow kind 'alias' units 'cfs'}
define C_EBP050_remaining2_dv {alias C_EBP050_remaining2 kind 'alias' units 'cfs'}
define C_EBP050_otherflow_dv {alias C_EBP050_otherflow kind 'alias' units 'cfs'}
define C_EBP050_remaining3_dv {alias C_EBP050_remaining3 kind 'alias' units 'cfs'}

define EBP134_SJRR_flow_remain_dv {alias EBP134_SJRR_flow_remain kind 'alias' units 'cfs'}
define EBP134_fld_flow_remain_dv {alias EBP134_fld_flow_remain kind 'alias' units 'cfs'}
define EBP134_other_flow_remain_dv {alias EBP134_other_flow_remain kind 'alias' units 'cfs'}

!************* Node 131
! Connectivity *** goal continuitySJR131       {C_SJR134 + CT_STEVINSON - C_SJR131                            = 0.} !SJR Nr Stevinson
define SJR131_netchg {value CT_STEVINSON[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR131_otherflow {
        case depletion {
        condition SJR131_netchg < 0.
        value max(0., SJR134_otherflow + SJR131_netchg)}
    case otherwise {
        condition always
        value SJR134_otherflow + SJR131_netchg}
}
define SJR131_unmet1 {value min(0.,SJR131_netchg + SJR134_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR131_Mlrtn_fldrel {
        case depletion {
        condition SJR131_netchg < 0.
        value max(0., SJR134_Mlrtn_fldrel + SJR131_unmet1)}
    case otherwise {
        condition always
        value SJR134_Mlrtn_fldrel}
}
define SJR131_unmet2 {value min(0.,SJR131_unmet1 + SJR134_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR131_SJRRflow {
    case depletion {
        condition SJR131_netchg < 0.
        value max(0.,SJR134_SJRRflow + SJR131_unmet2)}
    case otherwise {
        condition always
        value SJR134_SJRRflow}
}
define SJR131_otherflow_dv {alias SJR131_otherflow kind 'alias' units 'cfs'}
define SJR131_SJRRflow_dv {alias SJR131_SJRRflow kind 'alias' units 'cfs'}
define SJR131_Mlrtn_fldrel_dv {alias SJR131_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR131_netchg_dv {alias SJR131_netchg kind 'alias' units 'cfs'}

!************* Node 127
! Connectivity *** goal continuitySJR127       {C_SJR131 + C_SAL006 - C_SJR127                     = 0.} !Confluence with Mud/Salt Slough
define SJR127_netchg {value C_SAL006[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR127_otherflow {
        case depletion {
        condition SJR127_netchg < 0.
        value max(0., SJR131_otherflow + SJR127_netchg)}
    case otherwise {
        condition always
        value SJR131_otherflow + SJR127_netchg}
}
define SJR127_unmet1 {value min(0.,SJR127_netchg + SJR131_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR127_Mlrtn_fldrel {
        case depletion {
        condition SJR127_netchg < 0.
        value max(0., SJR131_Mlrtn_fldrel + SJR127_unmet1)}
    case otherwise {
        condition always
        value SJR131_Mlrtn_fldrel}
}
define SJR127_unmet2 {value min(0.,SJR127_unmet1 + SJR131_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR127_SJRRflow {
    case depletion {
        condition SJR127_netchg < 0.
        value max(0.,SJR131_SJRRflow + SJR127_unmet2)}
    case otherwise {
        condition always
        value SJR131_SJRRflow}
}
define SJR127_otherflow_dv {alias SJR127_otherflow kind 'alias' units 'cfs'}
define SJR127_SJRRflow_dv {alias SJR127_SJRRflow kind 'alias' units 'cfs'}
define SJR127_Mlrtn_fldrel_dv {alias SJR127_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR127_netchg_dv {alias SJR127_netchg kind 'alias' units 'cfs'}

!************* Node 123
! Connectivity *** goal continuitySJR123       {C_SJR127 + SG114_SJR123_16 - C_SJR123            = 0.} 
define SJR123_netchg {value SG114_SJR123_16[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR123_otherflow {
        case depletion {
        condition SJR123_netchg < 0.
        value max(0., SJR127_otherflow + SJR123_netchg)}
    case otherwise {
        condition always
        value SJR127_otherflow + SJR123_netchg}
}
define SJR123_unmet1 {value min(0.,SJR123_netchg + SJR127_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR123_Mlrtn_fldrel {
        case depletion {
        condition SJR123_netchg < 0.
        value max(0., SJR127_Mlrtn_fldrel + SJR123_unmet1)}
    case otherwise {
        condition always
        value SJR127_Mlrtn_fldrel}
}
define SJR123_unmet2 {value min(0.,SJR123_unmet1 + SJR127_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR123_SJRRflow {
    case depletion {
        condition SJR123_netchg < 0.
        value max(0.,SJR127_SJRRflow + SJR123_unmet2)}
    case otherwise {
        condition always
        value SJR127_SJRRflow}
}
define SJR123_otherflow_dv {alias SJR123_otherflow kind 'alias' units 'cfs'}
define SJR123_SJRRflow_dv {alias SJR123_SJRRflow kind 'alias' units 'cfs'}
define SJR123_Mlrtn_fldrel_dv {alias SJR123_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR123_netchg_dv {alias SJR123_netchg kind 'alias' units 'cfs'}

!************* Node 119
! Connectivity *** goal continuitySJR119       {C_SJR123 + C_MSN004 - C_SJR119                     = 0.} 
define SJR119_netchg {value C_MSN004[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR119_otherflow {
        case depletion {
        condition SJR119_netchg < 0.
        value max(0., SJR123_otherflow + SJR119_netchg)}
    case otherwise {
        condition always
        value SJR123_otherflow + SJR119_netchg}
}
define SJR119_unmet1 {value min(0.,SJR119_netchg + SJR123_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR119_Mlrtn_fldrel {
        case depletion {
        condition SJR119_netchg < 0.
        value max(0., SJR123_Mlrtn_fldrel + SJR119_unmet1)}
    case otherwise {
        condition always
        value SJR123_Mlrtn_fldrel}
}
define SJR119_unmet2 {value min(0.,SJR119_unmet1 + SJR123_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR119_SJRRflow {
    case depletion {
        condition SJR119_netchg < 0.
        value max(0.,SJR123_SJRRflow + SJR119_unmet2)}
    case otherwise {
        condition always
        value SJR123_SJRRflow}
}
define SJR119_otherflow_dv {alias SJR119_otherflow kind 'alias' units 'cfs'}
define SJR119_SJRRflow_dv {alias SJR119_SJRRflow kind 'alias' units 'cfs'}
define SJR119_Mlrtn_fldrel_dv {alias SJR119_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR119_netchg_dv {alias SJR119_netchg kind 'alias' units 'cfs'}

!************* Node 117
! Connectivity *** goal continuitySJR117       {C_SJR119 + C_NMW004 + SR_71_SJR117 + SR_72_SJR117 + SR_63_SJR117 + R_63_NA4_SJR117 - C_SJR117 + TD_SJR117_125 + TD_SJR117_124 = 0.} 
define SJR117_netchg {value C_NMW004[WHEELJPOD] + SR_71_SJR117[WHEELJPOD] + SR_72_SJR117[WHEELJPOD] + SR_63_SJR117[WHEELJPOD] + R_63_NA4_SJR117[WHEELJPOD] + TD_SJR117_125[WHEELJPOD] + TD_SJR117_124[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR117_otherflow {
        case depletion {
        condition SJR117_netchg < 0.
        value max(0., SJR119_otherflow + SJR117_netchg)}
    case otherwise {
        condition always
        value SJR119_otherflow + SJR117_netchg}
}
define SJR117_unmet1 {value min(0.,SJR117_netchg + SJR119_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR117_Mlrtn_fldrel {
        case depletion {
        condition SJR117_netchg < 0.
        value max(0., SJR119_Mlrtn_fldrel + SJR117_unmet1)}
    case otherwise {
        condition always
        value SJR119_Mlrtn_fldrel}
}
define SJR117_unmet2 {value min(0.,SJR117_unmet1 + SJR119_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR117_SJRRflow {
    case depletion {
        condition SJR117_netchg < 0.
        value max(0.,SJR119_SJRRflow + SJR117_unmet2)}
    case otherwise {
        condition always
        value SJR119_SJRRflow}
}
define SJR117_otherflow_dv {alias SJR117_otherflow kind 'alias' units 'cfs'}
define SJR117_SJRRflow_dv {alias SJR117_SJRRflow kind 'alias' units 'cfs'}
define SJR117_Mlrtn_fldrel_dv {alias SJR117_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR117_netchg_dv {alias SJR117_netchg kind 'alias' units 'cfs'}

!************* Node 116
! Connectivity *** goal continuitySJR116       {C_SJR117 + SG115_SJR116_16 + SG125_SJR116_18  + C_MCD002 - D_SJR116_72_NA1 - C_SJR116 = 0.} !Confluence with Merced
define SJR116_netchg {value SG103_SJR141_14[WHEELJPOD]} !Net inflow/diversion/accretion/depletion other than river inflow
define SJR116_otherflow {
        case depletion {
        condition SJR116_netchg < 0.
        value max(0., SJR117_otherflow + SJR116_netchg)}
    case otherwise {
        condition always
        value SJR117_otherflow + SJR116_netchg}
}
define SJR116_unmet1 {value min(0.,SJR116_netchg + SJR117_otherflow)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR116_Mlrtn_fldrel {
        case depletion {
        condition SJR116_netchg < 0.
        value max(0., SJR117_Mlrtn_fldrel + SJR116_unmet1)}
    case otherwise {
        condition always
        value SJR117_Mlrtn_fldrel}
}
define SJR116_unmet2 {value min(0.,SJR116_unmet1 + SJR117_Mlrtn_fldrel)}  !compute residual in case not enough water to meet, gets shifted to other terms (will be 0 or negative)
define SJR116_SJRRflow {
    case depletion {
        condition SJR116_netchg < 0.
        value max(0.,SJR117_SJRRflow + SJR116_unmet2)}
    case otherwise {
        condition always
        value SJR117_SJRRflow}
}
define SJR116_otherflow_dv {alias SJR116_otherflow kind 'alias' units 'cfs'}
define SJR116_SJRRflow_dv {alias SJR116_SJRRflow kind 'alias' units 'cfs'}
define SJR116_Mlrtn_fldrel_dv {alias SJR116_Mlrtn_fldrel kind 'alias' units 'cfs'}
define SJR116_netchg_dv {alias SJR116_netchg kind 'alias' units 'cfs'}

define LwrSJR_Recap_WHLJPD {value D_SJR096_SJRRrecap[WHEELJPOD] + D_SJR082_SJRRrecap[WHEELJPOD] + D_SJR070_SJRRrecap[WHEELJPOD]}
define LwrSJR_Recap_WHLJPD_ {alias LwrSJR_Recap_WHLJPD kind 'alias' units 'cfs'}

define SJRRflowsatVernalis {value SJR116_SJRRflow - LwrSJR_Recap_WHLJPD}
define SJRRflowsatVernalis_dv {alias SJRRflowsatVernalis kind 'alias' units 'cfs'}

!No additional for nodes below, assumption is that all SJRR and flood flows that make it past the Merced make it to the Delta, except SJRR flows recaptured on the lower river.
/* 
goal continuitySJR115       {C_SJR116 - C_SJR115                            = 0.} !USGS 11274000
goal continuitySJR114       {C_SJR115  + C_MRS000  - D_SJR114_62_NA5 - C_SJR114               = 0.} 
goal continuitySJR111       {C_SJR114 + SG126_SJR111_18 - C_SJR111                  = 0.} 
goal continuitySJR106       {C_SJR111 + SR_71_SJR106 + SR_72_SJR106 + SG127_SJR106_18 + SG131_SJR106_20 + R_71_PA5_SJR106 + R_72_XA3_SJR106 + R_72_NA1_SJR106 + C_ORT001 - C_SJR106 + TD_SJR106_130 + TD_SJR106_127 = 0.} 
goal continuitySJR105       {C_SJR106 - C_SJR105                  = 0.} !USGS 11274550 SJR nr Crows Landing
goal continuitySJR102       {C_SJR105 - D_SJR102_71_NA1 - C_SJR102              = 0.}
goal continuitySJR101       {C_SJR102 + R_TKWWTP_SJR101 - C_SJR101                  = 0.}
goal continuitySJR096       {C_SJR101 + SG132_SJR096_20 - D_SJR096_71_PA4 - C_SJR096 - D_SJR096_SJRRrecap = 0.} !SJR Nr Patterson
goal continuitySJR091       {C_SJR096 + SR_71_SJR091 + SR_72_SJR091 + R_71_NA1_SJR091 + R_71_PA4_SJR091 + R_71_PA5_SJR091 + R_71_PA7_SJR091 + C_DPC008 - C_SJR091 + TD_SJR091_133 + TD_SJR091_132 = 0.} 
goal continuitySJR090       {C_SJR091 + SG133_SJR090_20 - D_SJR090_71_NA2 - C_SJR090            = 0.} 
goal continuitySJR087       {C_SJR090 + C_WWW001 - C_SJR087                     = 0.} 
goal continuitySJR082       {C_SJR087 + R_62_NA5_SJR082 + R_62_NA3_SJR082 - D_SJR082_71_PA2 - C_SJR082 - D_SJR082_SJRRrecap = 0.} 
goal continuitySJR081       {C_SJR082 + SR_62_SJR081 + SG134_SJR081_20 + SG144_SJR081_22 + C_TUO003 - D_SJR081_61_NA5 - C_SJR081 + TD_SJR081_143 = 0.} !confluence with Tuolumne
goal continuitySJR075       {C_SJR081 + C_ING008 + SR_61_SJR075 + R_RFS61A_SJR075 + SR_71_SJR075 + R_71_PA1_SJR075 + R_71_PA2_SJR075 - C_SJR075 + TD_SJR075_145 + TD_SJR075_154 = 0.} !USGS 11290500 SJR @ Maze Road Bridge nr Modesto
goal continuitySJR072       {C_SJR075 + SG145_SJR072_22 + SG155_SJR072_24 + R_RFS61A_SJR072 + R_61_NA4_SJR072 + C_STS004 - C_SJR072 = 0.} !confluence with Stanislaus 
goal continuitySJR070       {C_SJR072 + SR_61_SJR070 + SR_71_SJR070 + R_71_NA2_SJR070 + CT_Vernalis - C_SJR070 + TD_SJR070_156 - D_SJR070_SJRRrecap - D_SJR070_SJRRremove= 0.} !USGS 11303500 SJR at Vernalis
*/


    
